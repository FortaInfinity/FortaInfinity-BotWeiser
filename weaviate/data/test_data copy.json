[
  {
    "bot_id": "0xdac6f4a16776648ef48b0c9850800507059e201139c2aa898b47d51ca0ebdaae",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Boba Network Bridge",
    "description": "The specific web3 bot described and provided in the source code is a \"Large Balance Decrease Bot\" used to monitor significant balance decreases in a protocol's token balance across multiple blockchain networks which include Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. Here are the summarized functionalities and purpose of the bot reflected in the provided source code:1. **Anomaly Detection:**   - The bot detects significant decreases in token balances for a specified contract address.   - It monitors for conditions when the contract's asset balance is completely drained or only a portion of it is removed.2. **Alerts and Labels:**   - If a complete balance drain is detected, the bot fires an alert with critical severity and exploit type, tagging the transactions and addresses involved as \"Suspicious\" or \"Victim\"/\"Attacker\" with high confidence.   - If only a portion of the balance is removed, an alert with medium severity is generated with similar labels.3. **Anomaly Scoring:**   - Each alert carries an anomaly score calculated based on the count of balance-decreasing transactions relative to the total number of transactions the monitored address is involved in. The score is between 0 and 1, and it helps in quantifying how anomalous a detected situation is.4. **Configuration:**   - Configuration settings are specified in a JSON file (`bot-config.json`) and entail the token's contract address and the time period for aggregation.5. **Block and Transaction Handlers:**   - Transaction handler `handleTransaction` scans for ERC20 'Transfer' events related to the monitored contract and evaluates the changes in balance.   - Block handler `provideHandleBlock` evaluates accumulated data in set time intervals to detect anomalies in balance. It can also use an ARIMA model to predict normal balance changes and compare them with the actual ones.6. **Persistence:**   - The bot includes persistence functionality that uses an external database or local storage to save and load data across block processing. It keeps track of the number of all drained transactions, portion drained transactions, and the total number of transfer transactions.7. **Testing:**   - A testing suite is available, allowing the checking of the bot's functionality. It includes a command to run test transactions (`npm run block ...` with specified block numbers) after configuring the bot with a specific contract address and time period.8. **Extended Functionality:**   - Beyond the basic functionalities described, the bot handles native token transfers and can perform model training and predictions when it has collected sufficient time-series data.In essence, the bot serves as an automated surveillance tool that detects and alerts on suspicious activities concerning balance removal from specified contract addresses on supported blockchain networks, with an integrated system for analyzing and predicting balance behavior, as well as recording detected anomaly events over time.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0xb9008e67f9a2425dc0e11f80d8d26880ec83880b9a169c9542a8e8d74337bb44",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Harmony ERC20 Bridge",
    "description": "Purpose of the Web3 Bot:The Large Balance Decrease Bot is designed to monitor the token balance of a specified contract on various blockchains and issue alerts if there is a significant decrease in the balance. This bot is an important security measure, aiming to quickly identify potential exploits where tokens or assets are drained from a contract. Here is a summary of the bot's functionality:- Supported on Ethereum and several other chains like Optimism, Binance Smart Chain, and more.- Detects complete and partial drains of a contract's token balance.- Issues critical alerts for the complete removal of all assets (BALANCE-DECREASE-ASSETS-ALL-REMOVED).- Issues medium severity alerts for a significant portion of the assets being removed (BALANCE-DECREASE-ASSETS-PORTION-REMOVED).- Utilizes metadata like transaction hashes, the impacted asset, and an anomaly score to provide detailed alert information.- Labels transactions and addresses associated with the anomaly as suspicious, and the affected contract address as the victim.Source Code Summary:The bot is implemented in JavaScript using Node.js. It leverages the `forta-agent` package to interact with the blockchain and detect relevant on-chain events, and ARIMA for time series anomaly detection. Within the source code, there are several key components:- `agent.js`: This is the main logic of the bot, which initializes the detection algorithm, handles blockchain transactions, and examines block events for potential alerts. It utilizes ARIMA predictive modeling to establish a threshold for normal token balance decreases to identify significant anomalies.- `persistence.helper.js`: Some state data need to be persisted between bot executions, and this component deals with the storage and retrieval of such state data, either via a remote database or the local filesystem.- `agent.spec.js, persistence.helper.spec.js`: These files contain unit tests to verify the bot's functionality and the persistence mechanism.The bot is set up to initialize metrics for tracking balances, count the relevant transactions, and uses a time series model to forecast normal behavior and give alerts in case of deviations. It uses configuration from `bot-config.json` to define an aggregation time period and contract addresses to monitor. The bot also handles the persistence of several key metrics, like the total number of transactions and number of suspicious transactions, for accurate anomaly detection and reporting. The tests ensure that the bot correctly handles transactions, creates appropriate findings, respects the aggregation time period, and successfully interacts with the persistence helper.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0x09f13e74c78ef50aae2fe7e929efeb140ae0d384efafee08784329cef1c49ec5",
    "developer_id": "0xe90BCAEE86D8aF5C120f9E99cd0050Ba63a42494",
    "name": "perp88-2-detect-large-close-and-decrease-position",
    "description": "Purpose:The specific web3 bot is designed to detect and generate alerts for large position closings or decreases in existing positions on Perpetual Trade within the supported Polygon network. The bot triggers alerts when the size of a position decrease or close exceeds a pre-defined USD threshold (largeLimit).Description:The bot operates on the Polygon network and uses events emitted by smart contracts to detect when a position is decreased (DecreasePosition) or closed (ClosePosition). The threshold for what constitutes a large position is configurable within the NetworkData found in `src/network.ts`. When a position that exceeds this threshold is decreased or closed, the bot emits an informational alert with details like the contract address, account address, position size, and position key. The bot also provides test data to facilitate verification of its behavior.Key Features:- Monitors DecreasePosition and ClosePosition events on Perp Trade contracts within the Polygon network.- Alerts are generated when these events exceed a definable large position threshold in USD.- Provides metadata in alerts including contract address, account address, and specifics about the position affected.- Alerts have a severity and type of \"Info\".- Contains configurable parameters for defining the large position threshold.- Includes a test suite within the source code to validate bot behavior under various scenarios.Source Code Analysis:The code provided is written in JavaScript (specifically, for Node.js) using the Forta Agent SDK, Jest for testing, and BigNumber.js for handling precision arithmetic operations.The bot code is divided into various JavaScript modules, including `agent.spec.js` (the test suite), `agent.config.js` (configuration constants for the agent), `utils.js` (helper functions), `network.js` (managing network configurations), and `agent.js` (the main logic for the bot).The main transaction handler (`handleTransaction`) retrieves the events from the transaction that match the DecreasePosition and ClosePosition event signatures defined in `agent.config.js`. It calculates the size delta (the change in position size) and checks if it exceeds the large position threshold. If it does, and depending on whether the position was also closed (verified by checking if a corresponding ClosePosition event exists), it generates an informational finding and adds it to an array of findings that are returned by the bot handler.Note: The description provided here is rather high level, and the specific behavior of the bot can be further ascertained based on detailed examination of the provided `agent.js`, `utils.js`, and `network.js` files, including the logic for initializing the bot, network-dependent variables, and the creation of findings based on events.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x1382d1ed487ad274c3a2effb5ce47a2bf018fffed7e890e364978f14c043ae21",
    "developer_id": "0xc5924Db956E47bfe3E33C00d3147e976638ea0Da",
    "name": "Idle PYTs large change in TVL 2",
    "description": "The purpose of the specific web3 bot in question is to monitor Collateralized Debt Obligations (CDOs) on the Ethereum blockchain, specifically for the IDLE finance protocol, to detect and alert when there is a drastic change in the contract value of a CDO.Based on the description and source code provided:- The bot runs on the Ethereum blockchain.- It produces an alert with ID `IDLE-PERPETUAL-YIELD-TRANCHES-DRASTIC-CHANGE-IN-CONTRACT-VALUE`.- The alert has a medium severity and is of the \"info\" type.- It includes metadata indicating the current and old contract values, as well as the CDO's symbol.From the source code:- The bot uses the `ethers` library to interact with the blockchain and smart contracts.- It triggers a check every 50 blocks, roughly equivalent to ten minutes considering the average block time.- The bot has a configurable threshold (`VALUE_DIFFERENCE_THRESHOLD` and other asset-specific thresholds) determining what constitutes a \"drastic change.\"- It queries a The Graph subgraph for information on the CDOs to be monitored.- It fetches the current and old contract values of the CDOs using a multi-call approach for efficiency.- It also takes into account the token's symbol and the decimals specification to correctly interpret the value changes.- The alert is generated when the contract value difference exceeds the set threshold.- The bot excludes certain CDOs based on a predefined list (`excludedCDOs`).The provided `agent.js` file contains the main logic with the `handleBlock` function that performs the necessary checks and potentially returns a list of findings (alerts) if a drastic change is detected. The `helper.js` file contains utility functions used by the main agent file, such as fetching CDO data and calculating contract values in USD.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0x601412378e2cea526d390f3e0a275f6b0e4bb2e549aedb2a577158d323b36842",
    "developer_id": "0x629800B0ED3c1E2A4846218ad10322BBFd317C3C",
    "name": "rake-token-hidden-fee",
    "description": "Purpose of the Specific Web3 Bot:The Forta Agent is designed to monitor Ethereum transactions and specifically detect transactions that involve the exchange of ERC20 tokens and include ETH transfers. If such a transaction is found, the bot generates a high-severity alert. This alert provides details including the sender's address, the ERC20 token address involved in the swap, the amount of ETH received by the sender, the fee collected in ETH, and the percentage of the fee relative to the transaction. The indication is that the bot's purpose is to monitor for suspicious transactions that could involve disproportionate fees or other anomalies worth investigating in these token swaps.Source Code Analysis:By examining the source code provided, specifically the \"agent.py\" and \"agent_test.py\" files, we can infer that the bot's operations revolve around detecting patterns in the transaction_event traces on the Ethereum blockchain.The `handle_transaction` function is the entry point for the bot, where it receives transaction events and checks for any occurrences of ETH transfers that involve ERC20 tokens by calling the `detect_eth_transfers_with_erc20` function. The function will only return up to 10 findings to comply with system limitations.The `detect_eth_transfers_with_erc20` function inspects traces of a transaction event looking for several conditions that would indicate a transaction meets the specified pattern. It checks for ERC20 token transfers, identifies the sender, and any fee collector address involved. The function also calculates the amount of ETH received by the sender and the fee collector, as well as the fee percentage. Every finding it generates is in line with its configuration, which is tailored to detect these complex transactions that involve both ERC20 token and ETH transfers.The `agent_test.py` file includes a test case (`test_detect_eth_transfers_with_erc20`) for the agent, ensuring that given a mock transaction event with predefined traces, the bot correctly identifies the desired pattern and creates an expected finding. This finding includes the precise metadata about the transaction, including addresses, amounts of ETH, and fee percentages as described in its configuration.The bot is written in Python, uses the Forta Agent SDK, and is designed for deployment within the Forta network, allowing it to actively monitor Ethereum blockchain transactions in real-time.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x59cda95beb03bf403a4753b04fd7f0a4d83014669c436b1d7eef66ae3e5e6834",
    "developer_id": "0x96ddE1bed8140fb9aD1d7B1Bd51210d19cb67937",
    "name": "aavev2-flashloan-detect-bot",
    "description": "Purpose of the Web3 Bot:The bot is designed to detect flash loan transactions specifically related to Aave v2 on the Ethereum blockchain. A flash loan is a feature that allows a user to borrow any available amount of assets from a designated smart contract pool with no collateral, provided that the liquidity is returned to the pool within one blockchain transaction. When a flash loan occurs that meets certain criteria set by the bot (such as involving a high amount of gas), the bot generates an alert.Based on the Description Provided:- The bot is a simple Aave v2 flashloan transaction detection bot.- It supports the Ethereum blockchain.- It will alert users or systems when a flashloan transaction test is conducted.From the Source Code (`agent.js`):The bot's source code suggests that it operates as follows:- It identifies transactions involving the Aave v2 contract on Ethereum by checking if the transaction addresses include the specified Aave v2 address.- It filters out the Flash Loan events from these transactions using the specific `FLASH_LOAN_EVENT`.- It checks the gas used by the transaction to determine if it exceeds a set threshold (`HIGH_GAS_THRESHOLD`), which indicates a significant transaction worthy of attention.- If a transaction meets all the above criteria, the bot creates a `Finding` that includes information about the flash loan events and assigns it a name, description, alert ID, protocol, type, and severity as informational.- These alerts could be used for various purposes such as monitoring for malicious activity, unusual patterns, or simply for data and trend analysis related to flash loans within the Aave v2 platform.It is important to note that in this code snippet, the handling of the flash loan detection is abstracted into the `provideHandleTransaction` function, which is then exported with the required dependencies injected. This can be beneficial for testing and can make it easier to update or configure the bot. The actual logic of the bot is primarily within the `provideHandleTransaction` and its returned `handleTransaction` function.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xf75e0714bd3a4f1df970c6d069ab3b457a2593846becef948751097d18d3286d",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Stargate SUSDC Bridge",
    "description": "The Large Balance Decrease Bot is designed to detect significant decreases in the balance of a specified protocol on various supported blockchains, including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. When the bot detects that the token balance of a monitored address has been completely drained or significantly reduced, it triggers alerts with varying severities and labels entities involved as suspicious (transactions) or victims/attackers (addresses).From the provided source code, which appears to be a JavaScript module designed to be used with the Forta Agent SDK, the bot maintains a record of token transfer events associated with a specific smart contract address (`contractAddress`). When the balance of any token associated with this address decreases completely (`BALANCE-DECREASE-ASSETS-ALL-REMOVED`) or significantly (`BALANCE-DECREASE-ASSETS-PORTION-REMOVED`), findings are reported. Findings include metadata about the first and last transaction hashes, the impacted asset, and an anomaly score.The bot employs the ARIMA time-series forecasting method to determine whether a decrease in balance is significant, based on historical balance data. It reports findings with a corresponding alert, severity, type, and labels for the involved entities. The bot's state, including the transaction count related to total and specific balance decrease events, is persisted across executions through a persistence helper, which interfaces with either a database or local storage depending on the environment.Test data is available for verifying the bot's behavior through an npm command, which facilitates testing the bot against various blockchain events.The source code of the bot includes three main components:1. `agent.js` - It contains the primary logic of the bot, including event handlers such as `handleTransaction` to process individual transactions and `handleBlock` to be called with every new block. It uses the ARIMA forecasting model to detect significant balance decreases.2. `persistence.helper.js` - A helper module to persist and load the state to and from a database or a local file. Persistence is critical for maintaining across runs the counts of different types of transfer transactions and calculating anomaly scores.3. Unit test files - These files (`agent.spec.js` and `persistence.helper.spec.js`) contain tests for the main and helper modules, assuring that the bot's functionality works as expected.Overall, this bot serves as a security tool that alerts on potentially malicious activities, such as exploits causing balance to decrease in protocols, and it is designed for extensibility to support multiple blockchains.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xb78ee7a647b25bfe14c1b0e26fd3ee4801d71f59f281a7f97b89639a3c93b554",
    "developer_id": "0x286a227Ae4f31c586E2935f1C0B0c36a0AD30340",
    "name": "umee-utoken-exchange-ratio-drop-bot",
    "description": "The purpose of the specific Web3 bot described is to monitor and detect large drops in the exchange rate ratio between specified uToken pairs (e.g., uDAI/uUSDT) on the Ethereum blockchain. If the exchange rate ratio drops beyond a certain customizable threshold, the bot triggers an alert with various levels of severity based on the size of the drop. The bot allows for customization of uToken pairs and corresponding thresholds for alerting within `src/agent.config.ts`.From the source code provided, the bot is structured with the following components:1. `fetcher.js`: A data fetching module that interacts with the blockchain to retrieve the underlying asset address, price, and normalized income for a specified uToken.2. `utils.js`: A utility module containing functions for calculating the exchange rate ratio between uTokens, determining the severity of the drop, and creating findings (alerts) for reporting.3. `agent.js`: The main logic of the bot that utilizes functions from `fetcher.js` and `utils.js` to detect significant drops in uToken exchange rate ratios and generate findings. It includes initialization logic to set up the required assets and their prices and a handleBlock function that compares price ratios between the current and previous blocks.4. `agent.config.js`: A configuration file specifying uTokens to watch, their addresses, uToken pairs to monitor, pair thresholds, difference intervals for severity levels, and contract addresses required for fetcher operations.5. `agent.spec.js` and `fetcher.spec.js`: Test suites that describe test cases to ensure the bot's functionality is working as expected. They simulate various scenarios using mocked data and check if the bot correctly detects exchange rate drops and generates corresponding findings.In summary, this bot is designed to provide real-time alerts for significant exchange rate drops between uToken pairs on Ethereum, which could be indicative of market instability or potential manipulation. Users can customize the bot's behavior to suit their monitoring needs.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0x8696edf726f5a74cec215f8ae21a29b7dc897f7403906fbab1a87ee4c03ebb13",
    "developer_id": "0xd3Abd0d36D6f55aD01BCd54D3f0c054F2B23de08",
    "name": "Loss-Reporter",
    "description": "Based on the provided description and source code, the purpose of the specific Web3 bot, which appears to be a \"forta-agent,\" is to monitor a Vesper Strategy on the blockchain and to detect when a loss is reported through either `reportLoss` or `reportEarnings` method calls. This bot sounds like it's part of a decentralized finance (DeFi) monitoring system.### Description of the bot:- It alerts when `reportLoss` or `reportEarnings` is called in the `poolAccount` of a Vesper pool.- The severity of the alerts is always set to \"Info\".- The type of findings it creates is also always set to \"Info\".- It includes additional metadata in its alert descriptions such as `strategyAddress`, `strategyName`, `poolName`, `poolStrategy`, and `lossValue`.- The metadata also includes the `lossValue` which indicates the value reported as a loss.### From the source code:The source code is divided into several parts, specifically `utils.js`, `abi.js`, and `agent.js`. - **utils.js**: Defines helpers for creating alert findings, detecting calls/events with reported losses, and formatting the finding object with necessary metadata like `strategyAddress` and `lossValue`.- **abi.js**: Outlines the ABI (application binary interface) which allows the bot to interface with Ethereum blockchain contracts using predefined function names and event signatures. ABIs provided are likely related to Vesper pool and strategy operations.- **agent.js**: Contains the logic that is executed for each transaction the agent inspects to detect relevant `reportLoss` or `reportEarnings` method calls or associated events indicating a loss. If a relevant method call or event is found, and the reported loss is above $50 USD (as per `REPORT_LOSS_LIMIT`), it processes further to add a descriptive message to the finding which is then emitted for potential off-chain handling.The bot leverages the Forta and Vesper libraries to check transactions for loss reports associated with Vesper pools and strategies. The bot uses different ABIs to read data from the blockchain and can calculate the losses in US Dollars using price feeds.Overall, the purpose of this bot is to provide information on Vesper strategies that are reporting losses, presumably as part of risk management or information dissemination to stakeholders in Vesper pools.It should be noted that the actual execution of the bot would depend on integration with the Forta network and Ethereum (or possibly other compatible) blockchain nodes.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x513ea736ece122e1859c1c5a895fb767a8a932b757441eff0cadefa6b8d180ac",
    "developer_id": "0x6Ec4b84aEB75eE330876FFFecA65cB635b41ED76",
    "name": "scammer-nft-trader",
    "description": "The purpose of the specific web3 bot described is to monitor and analyze NFT transactions across multiple blockchain marketplaces, such as OpenSea, LooksRare, and Blur, to detect suspicious activities that may be indicative of scams or phishing attempts. It operates by storing transaction records in a local MySQL database, enabling it to query for anomalies like sales far from floor prices or very rapid sales that deviate from normal patterns.The bot issues various types of alerts depending on the activity detected. These alerts include notifications for NFT sales at unusual price differences compared to the floor price, potential phishing sales where the transaction value is below a certain threshold, and alerts for stolen NFTs that may have been involved in a suspected phishing attack.Supported blockchain networks include Ethereum, BSC, Polygon, Optimism, Fantom, Arbitrum, Avalanche, and more.The source code for the bot includes a JavaScript file (`client.js`) that contains functions to determine token prices, retrieve OpenSea floor prices, and handle interactions with the MySQL database for transaction records. It also provides utility functions for fetching the latest transaction records and getting transactions by specific addresses.Additionally, the source code features test-related scripts for testing the database connection and table creation (`db.test.js`), as well as the bot's transaction handling logic (`agent.spec.js`). Other parts of the source code contain logic for parsing and interpreting different NFT transaction event logs and wrapping them up into a standardized format that can be stored in the database and used for alert generation.Overall, the bot serves as a tool to improve transparency and security in the NFT marketplace ecosystem by flagging transactions that may require further inspection for potential fraudulent activities.",
    "version": "1.0.0"
  },
  {
    "bot_id": "0x1d646c4045189991fdfd24a66b192a294158b839a6ec121d740474bdacb3ab23",
    "developer_id": "0xad7547d09015664943d0A7c1BeA47f28dF298EC0",
    "name": "Scam Detector Feed",
    "description": "The Scam Detector data feed provides real-time intelligence about EOAs, contracts and URLs involved in a variety of Web3 scams. It is jointly maintained by the Forta Foundation, Nethermind, Blocksec, ChainPatrol and members of the Forta developer community. It features market leading scam type coverage on ice phishing, address poisoning, rake tokens, token impersonation, fraudulent NFT orders, pig butchering, gas minting, sleep minting, hard rug pulls, soft rug pulls, and wash trading. Used by Web3 wallets, exchanges, crypto compliance companies and other Web3 security teams and tools. Teams can use Scam Detector labels to warn end-users during the pre-signing transaction approval process, to identify and prevent money laundering through regulated platforms, and to supplement existing blacklists among other use cases. Learn more in the documentation below, and request a free trial today.The provided Python code is for a Forta bot that detects and labels suspicious on-chain activities to thwart Web3 scams. It operates as follows:1. **Initialization (`initialize` function)**:   The bot initializes various dictionaries to store alerted entities keyed by suspicious behavior types (such as ML detections, passthrough, contract similarity, etc.), the findings cache, and contract signatures. It subscribes to specific bots that monitor different scam activities within the blockchain. It also loads the ML model for scoring and determining scam behavior.2. **Alert Handling (`handle_alert` function)**:   For every alert received that indicates potential malicious activity:   - If the alert comes from known bots that provide either passthrough or combination alerts, the bot decides whether to emit a scam finding immediately or evaluate using the ML model respectively.   - Contract similarity and EOA (Externally Owned Account) association alerts also result in findings if they meet certain conditions, like having a similarity score above a set threshold.3. **Block Handling (`handle_block` and `detect_scammer_contract_creation` functions)**:   At each new block, the bot may emit manual findings about scams from a maintained list, false positives identified by the Forta Community, or new findings from the MetaMask phishing list.4. **State Persistence (`persist_state` function)**:   The bot persists its current state on every block or alert handling to facilitate continuity in detecting scams across multiple blocks or transactions.5. **Transaction Handling (`handle_transaction` function)**:   Detects scammer contract creations which can be direct or indirect (via factory contracts).6. **Alert Finding Emission (`emit_ml_finding`, `emit_passthrough_finding`, `emit_contract_similarity_finding`, etc.)**:   Based on the type of alert and its source, emit relevant findings for potential scams.7. **False Positive Mitigation (`emit_new_fp_finding` function)**:   Emits findings to negate previous detections flagged mistakenly as scams by labeling them as non-malicious.8. **Parsing Alerts (`BaseBotParser` class)**:   A helper class to extract scammer addresses and URLs from the alert events based on a configuration.The code is organized into several Python files according to functionality:- `agent.py`: The core script with functions to manage alert, block, and transaction handling.- `findings.py`: Definitions for generating findings based on scam detection.- `storage.py`: Utilities for interacting with AWS S3 and DynamoDB for state persistence.- `utils.py`: Helper utilities including error handling, data extraction, and information retrieval.- `web3_mock.py`: A mock interface of the Web3.py Ethereum client for testing purposes.- `base_bot_parser.py`: Implements the parsing of alerts according to a configuration CSV file.- `forta_explorer.py`: Interface to query Forta's API for label data.- `forta_explorer_mock.py`: Mock version of the Forta Explorer for testing.The code utilizes Forta's SDK to interact with the Forta network and report findings that can be used for on-chain or off-chain scam mitigation efforts.",
    "version": "2.20.12"
  },
  {
    "bot_id": "0xe39e45ab19bb1c9a30887e157a21393680d336232263c96b326f68fa57a29723",
    "developer_id": "0xE48CA5319BBfcb0B1b8Cc4981aA56d39419D9f2d",
    "name": "blocksec-bot",
    "description": "The purpose of the BlockSec Attack Alert Bot is to monitor blockchain transactions and detect malicious activity by using the BlockSec monitoring system. This bot generates alerts for suspicious transactions and is designed to support multiple blockchain networks, including Ethereum, BSC (Binance Smart Chain), Polygon, and Avalanche.The bot has two main components visible from the provided source code\u2014one for unit testing and one resembling the actual bot functionality.The unit test script (`agent_test.py`) contains tests for a function `handle_transaction`, which monitors transfers of Tether (USDT) tokens. Specifically, it tests the following scenarios:1. If no Tether transfers occur in a transaction, the bot should return an empty list of findings.2. If there is a Tether transfer of an amount exceeding 10,000 USDT, a finding is generated.A finding includes details such as the name, description, severity (which is set to `FindingSeverity.Low`), and type (which is `FindingType.Info`) of the alert, along with metadata about the transaction such as the sender and receiver addresses.The main bot script (`agent.py`) provides functionality to handle block events. It communicates with an external API (presumably hosted by `fortabot.blocksec.com`) to fetch information about potentially malicious transactions within a given block. The bot's logic includes:1. Making a POST request to the external API with the network ID and block number to retrieve results of suspected malicious activity.2. Parsing and validating the API's response, checking for the expected fields and matching network IDs.3. Generating findings for each suspicious activity reported by the API, where each finding contains details about the suspicious transaction, such as the names, description (including profit made and the preview URL if available), alert ID, severity (determined based on a predefined severity mapping), and metadata including transaction hash, sender, receiver, attacker, and victim.Severity levels for findings are categorized into Info, Low, Medium, High, and Critical based on the `SEVERITY` dictionary keyed by integers 0 to 4.This bot serves as an early warning system for potentially malicious transactions (like thefts, scams, or exploits) and aims to help users and network participants in identifying threats quickly. Reach out to contact@blocksec.com for more information or inquiries about the bot.",
    "version": "0.07"
  },
  {
    "bot_id": "0x761d333bbbddc4561c99d71d97c0b0ff005da2306fa3090863cb2d3c67e941e3",
    "developer_id": "0x000000000088E0120F9E6652CC058AeC07564F69",
    "name": "Pickle Range Management Monitor",
    "description": "Purpose:The Pickle Range Management Monitor bot's purpose is to monitor strategies for Pickle finance, a DeFi platform offering various yield farming opportunities, and ensure that the strategies remain productive (in range) and earn fees on the Polygon chain. If a strategy's ticks (index positions for price ranges in which liquidity providers earn fees) are found to be out of the expected range, the bot is designed to send a high-severity, informational alert. The metadata accompanying an alert will include the strategy's address, the lower and upper tick values, as well as the current tick.From analyzing the provided source code, the bot consists of multiple Javascript modules that simulate the monitoring process over a series of tests. The modules interact with smart contracts using Abi (Application Binary Interface) definitions and Ethereum's ethers library. Notably, the `agent.js` module includes the functionality to handle block events by retrieving the strategies and their corresponding tick values and then determining if they are out of the allowable range. The `strategy.fetcher.js` module provides a class `StrategyFetcher` designed to interact with on-chain data and retrieve the necessary strategy details and tick information from the Ethereum blockchain.Source Code Overview:- `strategy.fetcher.spec.js`: Contains unit tests for StrategyFetcher to ensure that strategies' addresses and ticks are correctly retrieved and handled.- `agent.spec.js`: Contains unit tests for the agent's main functionality \u2013 namely, to detect when strategies are out of range and to create corresponding findings.- `mock.provider.js`: Sets up a mock provider for testing purposes, simulating Ethereum RPC calls and responses.- `strategy.fetcher.js`: Defines the StrategyFetcher class used by `agent.js`. This class is responsible for querying the blockchain to retrieve the strategies' tick ranges and the current tick.- `abi.js`: Provides the ABI definitions for interacting with the necessary smart contracts (KEEPER, STRATEGY, POOL).- `agent.js`: Contains the main logic of the bot. It defines a function `provideHandleBlock`, which, given a block event, retrieves strategies and their tick values using `StrategyFetcher`, then it checks if ticks are within the expected range and emits findings accordingly. It ends with setting up the agent to automatically run the aforementioned function when new blocks are mined.For efficiency and brevity, the source code uses modern Javascript asynchronous patterns (async/await), handles Ethereum data types (BigNumbers), and interacts with smart contracts through ethers.js. It is also structured to support unit testing with mocks to simulate blockchain interactions.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xbc1f5127113aeb6332451d5a5e51bf0bdd707c45eca26083e312c2066819a739",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Symbiosis Finance Bridge",
    "description": "The specific Web3 bot described in the text is designed to monitor the token balances of a given protocol and trigger alerts in cases where significant decreases in token balances are detected, possibly indicating an exploit or suspicious activity. The bot functions by observing transfer events for specified addresses and calculating the changes in token balances over time. It operates across multiple blockchain platforms, including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche.The bot generates two types of alerts:1. `BALANCE-DECREASE-ASSETS-ALL-REMOVED`: This alert is fired when the token balance of a protocol is completely drained, which the bot considers a critical severity scenario likely indicative of an exploit. Metadata for this alert includes the first and last transaction hash for the period, the drained asset, and an anomaly score reflecting the rarity of the event. The bot also attaches several labels to the finding with high confidence levels signifying suspicious transactions, the victim, and the attacker.2. `BALANCE-DECREASE-ASSETS-PORTION-REMOVED`: This alert is raised when a significant portion of the token balance of a protocol is drained. The alert level for this scenario is set to medium severity, and similar metadata is provided, with the inclusion of the percentage decrease in asset volume. The labels attached to the finding have a slightly lower confidence level than the all-removed scenario.The bot incorporates a persistence layer, where it periodically saves and retrieves its internal state from a centralized database or local file storage if a `LOCAL_NODE` flag is present. It employs an ARIMA model for time series forecasting, which helps determine if the balance decrease is statistically significant based on past balance data.The source code of the bot makes use of several JavaScript and Node.js libraries, mainly the `forta-agent` library for detecting blockchain events and `arima` for time series analysis. It is structured to have separate functionalities for initializing the bot environment, handling individual transactions, and processing block events where aggregate analysis is performed.To test the bot's behavior, the source includes a test suite that uses the `jest` framework, which mocks blockchain data and verifies various scenarios, ensuring the bot functions as intended.Lastly, the bot setup walkthrough outlines how to perform local tests by executing npm commands with specified block numbers and by updating `contractAddress` and `aggregationTimePeriod` to the desired values for testing.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xc229915675d683a13e69ebc4a9ddd9f2b86712ed6cad8c33180811e03499aded",
    "developer_id": "0x2DD872C6f7275DAD633d7Deb1083EDA561E9B96b",
    "name": "alperp-large-increase-position-tx",
    "description": "The purpose of the specific Web3 bot is to monitor position openings and increases in a perpetual futures trading platform on the Binance Smart Chain (BSC). It listens for specific events emitted by smart contracts related to trading activities: `UpdatePosition` and `IncreasePosition`. When a position opening or increase exceeds a predefined size threshold (specified in USD), the bot generates an alert to inform users about significant position changes which could potentially impact the market.The source code is written in TypeScript and uses the Forta agent framework for detecting security and operational issues within blockchain applications. It includes:1. An agent spec file `agent.spec.js` that contains tests for the bot's behavior under various scenarios to ensure its functionality.2. The `agent.config.js` file that holds configurations such as the address of the Perp Trade Contract on BSC (`POOL_DIAMOND_BSC`), the ABI of events to listen for, the precision for price calculation, and the threshold for detecting large positions (set to 6000 USD).3. The `utils.js` file which provides utility functions for converting BigNumbers and creating standardized output findings.4. The `network.js` file that manages network-specific configurations such as contract addresses and thresholds.5. Finally, `agent.js` includes the logic of how transactions are processed and findings are generated based on the events emitted and the configured threshold.The bot operates as follows:- It initializes by determining the chain it is running on and sets the appropriate network configurations.- During its transaction handling, it filters and processes events emitted by the Perp Trade Contract. If an event indicates that a position size or an increase matches or exceeds the threshold, it will produce a finding with the details of the event. The findings include information such as the contract address, account involved, position size, and the identifier key for the position.The bot ensures that it only listens to events from a specific contract address, ignores irrelevant events, and matches `IncreasePosition` events with corresponding `UpdatePosition` events by their identifier keys before comparing position sizes with the predefined threshold.Overall, this bot can be used to monitor and alert about large trading positions in real time, which might be valuable information for traders and analysts who are keeping an eye on market liquidity and potential price movements.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0x0b5f51563d1ca3fb74a17af67db998cbc290fce19f1db716e7cc7cbfa1b2a9fc",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Arbitrum Outbox",
    "description": "Purpose:This bot, named \"Large Balance Decrease Bot,\" is designed to detect and alert when there is a significant decrease in the balance of a protocol's or smart contract's token assets. It supports multiple blockchains including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche.When the token balance of a monitored smart contract is completely drained, the bot triggers an alert with critical severity and exploit type. If a significant portion (but not all) of a smart contract's token balance is removed, it triggers a medium severity exploit-type alert.The bot calculates an anomaly score to express the abnormality of the observed balance decrease event. The anomaly score is based on the frequency of full or partial balance decrease transactions relative to all token transfers involving the monitored address.Alerts generated by the bot provide metadata and labels offering details on the incident, including transaction hashes, impacted assets, anomaly scores, and additional information indicating the level of suspicion of the transactions.Key Components Based on Source Code:1. agent.js: Core functionality of the bot, which includes initializing configuration, processing transactions, tracking asset balances, and triggering alerts.2. agent.spec.js: Provides unit tests for the agent.js components, allowing verification of the bot's behavior.3. persistence.helper.js: Handles the persistence layer that the bot uses to store and retrieve state across multiple executions. It uses either a remote database or local file storage, depending on the environment configuration.4. persistence.helper.spec.js: Contains unit tests for persistence.helper.js to ensure the reliability of data loading and persistence mechanisms.The bot is set up with environment-specific keys for storing transaction counts, which are used in anomaly detection. It uses the ARIMA model for time series analysis to determine if the balance decrease is significant based on historical data. The bot has functionality for both handling individual transactions (with `handleTransaction`) and periodic block analysis (with `handleBlock`). The latter includes processes for data persistence across blocks and anomaly detection based on time series analysis.In summary, the bot actively monitors smart contract asset balances, identifies critical and medium-severity balance decreases, and raises alerts for potential exploits with detailed context for further investigation.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x9c43fd0e1474ae47a6061872502e896906ebe42e79f6b62c09683ed4045e285c",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Compound v3 Timelock Transaction Executions Monitor",
    "description": "The Timelock Transaction Executions Monitor Bot is a web3 bot primarily designed to monitor and analyze transactions executed from bridge receivers' timelocks on the Polygon blockchain. It aims to inform users about executed proposals and alert them to any potentially suspicious actions. Here\u2019s a summary of the bot\u2019s operation based on its description and provided source code:1. **Monitoring Transactions:** The bot listens for `ExecuteTransaction` events from bridge receivers' local timelocks to detect executions of transactions.2. **Analyzing Proposals:** It matches the executed transactions with previous `ProposalCreated` logs and checks whether they are in accordance with `ProposalExecuted` logs.3. **Emitting Findings:** The bot emits findings under different scenarios:   - `COMP2-6-1`: A finding is emitted for successfully executed proposals. The severity is set to \"Info\".   - `COMP2-6-2`: If a proposal is not fully executed, it emits a finding with an \"Unknown\" severity, and the type is \"Suspicious\".   - `COMP2-6-3`: If an executed transaction cannot be linked to any proposal execution call, it emits a \"Suspicious\" finding with an \"Unknown\" severity, encouraging further investigation.4. **Logging for Debugging:** In the event that proposal parameters can't be found due to the need to fetch historical data, the bot logs this for debugging, particularly for `COMP2-6-3` findings.5. **Configuration:** The bot allows configuration through `agent.config.ts` where the bridge receiver addresses and other parameters are set (e.g., `creationFetchingBlockRange`).6. **Support and Testing:** The bot supports the Polygon chain, providing a transaction hash as sample test data to check against real data.7. **Source Code Overview:**   - `constants.js`: Defines ABI constants for smart contract interactions.   - `agent.spec.js`: Contains unit tests for the bot's functionality.   - `finding.js`: Functions to create different types of findings emitted by the bot.   - `agent.config.js`: Configuration file includes settings like the bridge receiver address and fetching parameters.   - `utils.js`: Provides utility functions such as logging and fetching past event logs.   - `agent.js`: The main agent script which provides the `initialize` and `handleTransaction` functions, integrating all parts of the bot's functionality.This bot serves as an automatic auditor that ensures the integrity and transparency of governance-related transactions within a decentralized environment on the Polygon network. It helps stakeholders stay informed about executed proposals and potential issues with timelock transactions.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xcceb7abc4cc38ec43a19cc5bf8b3581415e04b6a2822f058b65f590806be72c6",
    "developer_id": "0xc5924Db956E47bfe3E33C00d3147e976638ea0Da",
    "name": "Idle BY price agent",
    "description": "Purpose:The purpose of the specific Web3 bot described here is to monitor the price of IDLE tokens and detect if the token price has decreased. It is designed to work on the Ethereum blockchain and triggers an alert tagged as \"IDLE-BEST-YIELD-TOKEN-PRICE-DECREASE\" when a price drop is detected. The severity level for this alert is set to \"medium\" and the type of alert is classified as \"info.\" The metadata associated with an alert includes both the current (\"price\") and the previous (\"oldPrice\") price of the token being monitored.Source Code Summary:The source code provided consists of three parts: `agent.spec.js`, `helper.js`, and `agent.js`. Together, these files define the behavior of the Web3 bot.1. `agent.spec.js` is a test suite for the bot's functionality, using the Jest testing framework. It tests the `handleBlock` function, which should return findings when the price of a token has decreased and empty findings if the token\u2019s price has not decreased.2. `helper.js` contains helper functions to interact with the blockchain. It defines a method `getMarkets` to retrieve all market addresses, the symbols for those contracts, and the current prices of the tokens. It also includes an array of additional markets (named `additionalMarkets`) and functions to get token prices.3. `agent.js` is the primary bot logic. The `handleBlock` function calls `getTokenPrices` for updated token prices every 50 blocks (as indicated by `blockEvent.blockNumber % 50 != 0`). It compares the new token prices to stored `oldPrice` values for each market. If a price decrease is detected, the bot creates an alert by calling the `createAlert` function, then updates the `oldPrice` for future comparisons. The alert contains the token symbol, the current and old prices, and metadata. The severity and type in the `createAlert` function are set to `Critical` and `Suspicious`, but this seems inconsistent with the provided description that specifies the severity as \"medium\" and type \"info\", which may indicate a discrepancy or oversight in the source code.Overall, the bot serves as a monitoring tool within the Web3 ecosystem to provide users or protocols with information about IDLE token price changes, potentially enabling responsive strategies or notifications.",
    "version": "0.0.5"
  },
  {
    "bot_id": "0x5b25acc178d90f63554fb8541a7d1c188444ba64a6b6d3c79fcb10b11e3ebfd3",
    "developer_id": "0x6aea36C4a9Cf8AC053c07E662fa27e8BDF047121",
    "name": "lido-on-polygon",
    "description": "The purpose of this specific Web3 bot is to monitor and alert for various potentially risky or noteworthy conditions and changes within the Lido on Polygon protocol. This decentralized finance (DeFi) protocol allows users to stake MATIC tokens and earn stMATIC rewards. The bot includes several sub-bots to watch for distinct events and states, such as DAO operations, node operators' activity, and withdrawal monitoring.Some of the alerts the bot can generate are:- Large amounts of MATIC tokens in the buffer.- Delays in the distribution of stMATIC rewards.- Changes in protocol parameters and contract roles.- Lack of active node operators.- Unusual withdrawals.The source code provided for the bot consists of various JavaScript files, each contributing to different aspects of the bot's functionality:- **constants.js**: Contains various constants used across the bot such as event signatures, blockchain addresses, timing parameters, and thresholds for triggering alerts.  - **agent-node-operators-v2.js**: Contains the logic for handling alerts related to node operators on Polygon, including possible concerns like inactive node operators or changes in node operator settings.- **version.js**: Reading and providing the version information for the bot.- **agent-dao-ops.js**: Contains the logic for handling decentralized autonomous organization (DAO) related operations monitoring.- **agent-dao-ops.spec.js**: Test cases for the DAO operations monitoring logic. This helps assert the bot's functionality and generally aids in quality assurance.- **helpers.js**: Provides utility functions that assist in manipulating and presenting numeric data. For example, `abbreviateNumber` can be used to shorten large numbers with standard numerical abbreviations.- **agent-withdrawals-monitor.js**: Contains the logic for monitoring large or numerous withdrawal requests within a given period.- **ethers.js**: A simple module exposing an `ethersProvider` object for interfacing with Ethereum compatible blockchains.- **agent.js**: Acts as the main entry point, coordinating the initialization and block/transaction event handling across different sub-agents.- **tools.js**: Contains helper functions for data manipulation, such as sorting events in descending order based on their block number.The entire bot is based on the Forta Agent SDK, an open-source software that enables developers to create custom bots for monitoring and securing decentralized systems. The bot leverages the Forta SDK's features to observe on-chain activity and report potential issues and important changes to stakers, developers, or governance members of Lido on Polygon.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x6a0960a22bb752532b68c266dfa507849009283bf11f086095f3504211c2b5fa",
    "developer_id": "0x70358461af09dCb10B003e8e0a6033de34387A2a",
    "name": "Evidence of Phishing Agent",
    "description": "The provided code describes a Web3 bot designed to detect phishing activities on the Ethereum blockchain, particularly those related to token approvals to externally owned accounts (EOAs). Below is the summary of its components based on the description and source code provided:### Purpose:The bot aims to detect potential phishing attacks by observing patterns of multiple EOAs approving token transfers to a single target EOA, which could indicate that users are unknowingly authorizing a malicious entity to spend their tokens.### Functionality:1. The bot uses an asynchronous database to maintain state, allowing it to survive restarts without losing track of ongoing investigations into suspected attacks.2. Three primary threads run concurrently:   - The first thread detects potential phishing evidence and adds it to the database.   - The second thread analyzes the database for EOAs with a high number of incoming approvals and raises alerts.   - The third thread cleans up old transaction data from the database.3. The bot's configuration supports customization of monitoring periods, threshold values for transferring amounts, and acknowledged centralized exchange addresses.4. Alerts are generated based on the severity of detected phishing activities (medium, high, and critical) and include metadata such as the suspected malicious EOA, monitoring period, potential victims, and affected contracts with amounts.### Source Code:- `findings.py`: Defines the `EvidenceOfPhishingFindings` class to provide findings based on detected phishing activities.- `config.py`: Contains configuration parameters for monitoring thresholds and periods.- `centralized_exchanges.py`: Includes a method to scrape exchange addresses from a given HTML source to identify known exchange EOAs.- `utils.py`: Provides utility functions such as argument extraction from events and EOA checks.- `agent.py`: Contains the primary logic of the bot, including functions to detect, analyze, and clear database entries.- `agent_test.py`: Includes test cases for the agent.- `web3_mock.py`: A mock Web3 class used for testing.- `controller.py`: Sets up the asynchronous database and initializes the tables.- `models.py`: Defines the SQLAlchemy ORM model for the transfers table.- `methods.py`: Wraps method execution in a session management context to interact with the database, including querying and committing transactions.### Tests and Configuration:- It supports Ethereum mainnet.- Includes tests to verify the agent's behavior under various situations.- Can be tested by simulating a specified block range, detecting instances similar to known exploitation patterns (e.g., BadgerDAO exploiters).### Deployment and Usage:- Users are advised to set their own configuration values and handle any unique errors that may arise.- The alert mechanism depends on the quantity of detected `approve()` or `increaseAllowance()` calls targeting the same EOA.- The agent can be run using Forta's tools to simulate its behavior.### Precautions:- The bot excludes approvals where either the spender or the owner is a smart contract.- Known centralized exchange addresses are maintained and checked to avoid false positives.In summary, this Web3 bot works as a security agent to alert users of suspicious token approval actions that may imply a phishing threat, and it provides continuous monitoring with a persistent database that withstands interruptions.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x33bb8d279150938d062ce3d98dea48514828971611a5b9a64789576bb0a0152c",
    "developer_id": "0x40e98Fe8BCc8c0fF48A585bc6f28d504fF17A927",
    "name": "Forta Scanner Node Software Updated",
    "description": "The specific web3 bot described and presented with its source code is designed to monitor and detect updates to the version of a FORTA Scanner Node specifically on the Polygon blockchain. Its purpose is to create alerts when such an update event is detected. Here's a summary of its function based on the description and provided source code:- **Purpose**:   - The bot aims to detect updates to the FORTA Scanner Node version.  - **Supported Chain**:   - The bot operates on the Polygon blockchain.  - **Alerts**:   - It triggers an alert with the ID \"FORTA-SCANNER-NODE-UPDATED\" when a transaction contains a `ScannerNodeVersionUpdated` event.  - The severity of this alert is always \"low\".  - The type of this alert is \"info\".  - **Metadata Fields**:   - The alert includes metadata such as the `oldVersion` and `newVersion` of the scanner node.- **Test Data**:   - The bot\u2019s behavior can be verified with a specific test transaction on Polygon which includes a `ScannerNodeVersionUpdated` event.As for the source code, it consists of two parts: `agent.spec.js`, which contains unit tests for the bot's function `handleTransaction`, and `agent.js`, which contains the actual logic for detecting version updates and creating findings.- The `handleTransaction` function in `agent.js`:  - Filters the transaction events based on a specified ABI and contract address to find `ScannerNodeVersionUpdated` events.  - Constructs a finding for each detected event which contains the `name`, `description`, `alertId`, `severity`, `type`, `protocol`, and `metadata` including the `oldVersion`, `newVersion`, and the address that performed the update (denoted as `updatedBy` in the metadata).  - The `handleTransaction` tests in `agent.spec.js`:  - Verify that no findings are produced if there are no `ScannerNodeVersionUpdated` events in a transaction.  - Ensure that a finding is produced with the correct structure when such an event is present in a transaction.In summary, this web3 bot serves as a monitoring tool that generates informational alerts on low priority when a FORTA Scanner Node version is updated, helping users to stay informed about changes in scanner node versions on the Polygon network.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xd2f60f7626eaeb15c4026578e28f799afb1587db3a8e4cb5bf2d42b54e13933d",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - zkSync Era Bridge",
    "description": "The purpose of the \"Large Balance Decrease Bot\" is to monitor smart contracts on various blockchain networks and alert if there is a significant decrease in the balance of a protocol. It aims to identify possible exploits by detecting when token balances are drained completely or by a large portion. Here's a summary of its functionality based on its description and source code:- **Supported Chains**: Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche.- **Alert Types**:  - `BALANCE-DECREASE-ASSETS-ALL-REMOVED`: Triggered when a protocol's token balance is completely drained. This alert has a \"critical\" severity level and is classified as an \"exploit\".  - `BALANCE-DECREASE-ASSETS-PORTION-REMOVED`: Triggered when a significant portion of a protocol's token balance is removed. This alert has a \"medium\" severity level and is also classified as an \"exploit\".For both alert types, metadata includes details such as transaction hashes, the impacted asset, and an anomaly score based on the rate of such events compared to the total transfers involving the monitored address. The alert system also assigns labels to entities involved in the transactions, such as marking transactions as \"Suspicious\" and identifying addresses as either \"Victim\" or \"Attacker\" with associated confidence levels.- **Source Code**: The `agent.js` contains the logic for detecting balance decreases. The bot has three main functions:  - `handleTransaction`: inspects each transaction and determines whether it involves the monitored smart contract. If there is a decrease in the contract's asset balances, it checks if the balance is completely drained or decreased significantly to issue the appropriate alert.  - `provideHandleBlock`: processes block events to periodically evaluate the normal balance fluctuations using the ARIMA model and detect any anomalies compared to historical data.  - `PersistenceHelper`: interfaces with a database to store and retrieve the number of detected exploits and the total number of transactions to maintain an updated anomaly score.The bot uses ARIMA modeling to predict normal balance variations and identify significant deviations. The source code shows that persistence is achieved through an external database, or locally if specified, to store state across invocations.The bot setup walkthrough section suggests testing the bot's behavior by running it with specific block numbers and changing the contract address and aggregation time period accordingly.The `agent.spec.js` and `persistence.helper.spec.js` files contain unit tests for the bot, ensuring its behavior matches the expectations set out in the description. The tests cover different scenarios, including handling of transactions and persistence of data. Overall, this bot strives to provide critical security alerts when a monitored smart contract experiences unusual balance reductions, which could indicate an ongoing exploit or attack.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xdd72bddaeecbd1b4022c9275538fc4cb268b16980ad06428d697a36c1b61e208",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Hop Protocol USDT Bridge",
    "description": "The Large Balance Decrease Bot is designed to monitor specific blockchain protocols and detect critical situations where there is a significant decrease in their token balances. It is capable of detecting two types of events:1. **BALANCE-DECREASE-ASSETS-ALL-REMOVED**: Triggered when a protocol's token balance is completely drained. This is considered a critical alert and treated as an exploit. The bot records the transaction hash of the first and last transactions of the period, the drained asset, and calculates an anomaly score representing the frequency of such events. It generates labels to identify the transactions as suspicious and the affected address as a victim, as well as the initiator address as a possible attacker.2. **BALANCE-DECREASE-ASSETS-PORTION-REMOVED**: Fired when a significant portion of the token balance is removed from a protocol. The severity for this alert is set to medium. It follows similar metadata and labeling as the complete drain alert but with a different anomaly scoring and confidence level.The bot supports multiple chains including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. For its operation, the bot uses a set of labels with different levels of confidence depending on the alert type.From the provided source code, it is evident that the bot is developed using JavaScript, with the Forta agent library to interact with blockchain data. It includes unit tests to validate its functionality, a persistence helper module to handle storing and loading data from a database or local storage, and the main functionality implemented in `agent.js`.The main agent code performs the following tasks:- Initializes persistent storage of previous detection counts and sets up the network chain ID.- Monitors transactions for any Transfer events to or from the monitored address (using `handleTransaction`), adjusting balance records, and attempting to identify suspicious activity based on the defined alert conditions.- Periodically (at block events and according to the configured aggregation time period), assesses the transaction history for anomalies beyond what is expected by the ARIMA model and generates findings in case of significant balance decreases (using `provideHandleBlock`).Overall, the bot is a security tool for detecting suspicious transactions that might indicate an exploit or attack on a blockchain protocol by closely monitoring the balance changes of that protocol's contract address.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x22673b42f62e43091c68378aa78f24a771f4f79042e2fb10eaedf53b1e07a75c",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Hop Protocol Ethereum Bridge",
    "description": "Purpose:The \"Large Balance Decrease Bot\" is designed to monitor the token balance of a specified blockchain protocol and trigger alerts when a significant decrease in balance occurs. This monitoring is done over various supported chains, including Ethereum and BSC, among others. The bot identifies two types of balance reduction events: total asset drains (critical severity) and significant partial balance decreases (medium severity). The bot uses anomaly detection, taking transaction patterns into account and adjusting for each blockchain's characteristics. In addition to generating an alert, the bot also assigns labels to transactions and addresses to classify them as suspicious or identify the victim and attacker entities.Source Code Overview:The source code for the bot is divided mainly into three JavaScript files: `agent.spec.js`, `persistence.helper.js`, and `agent.js`.`agent.spec.js`:- Contains unit test cases for the bot's functionalities.- Mocks the blockchain state and tests various scenarios such as the absence of transfers, balance tracking, and detecting balance drainers.- It verifies that the necessary findings are returned when criteria for an alert are met.`persistence.helper.js`:- Defines a class for storing and retrieving persistent data across different bot runs.- Uses an external database or local file storage to persist data. It can POST or retrieve values from a database depending on the presence of a local node.- Wrapped in unit tests to ensure its correct functionality.`agent.js`:- Contains the bot's main logic, implementing the `provideInitialize`, `handleTransaction`, and `provideHandleBlock` functions.- Initializes the bot, setting up the starting state and reading previously stored data relating to balance removal transactions and total transactions.- Detects significant balance changes in `handleTransaction` by listening for transfer events, updating balance states, and generating findings for entirely drained assets.- In `provideHandleBlock`, the bot periodically checks if there's been any significant decrease in token balances during a preset aggregation period using data analytics (ARIMA model).- Utilizes a `PersistenceHelper` to store and retrieve transaction counts and other statistical data used for anomaly detection.- Runs a series of checks during blockchain block additions to analyze asset balance changes over time and generates an alert if anomalies are detected.The source code provides a comprehensive approach to detecting, analyzing, and alerting on significant token balance decreases, with an emphasis on anomaly detection and user informatics through findings.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x5e64868ad53949a370ea3e4e03d742fa2108aac71d1c31a4f582b917fbd7f5d4",
    "developer_id": "0xe90BCAEE86D8aF5C120f9E99cd0050Ba63a42494",
    "name": "perp88-3-detect-many-opening",
    "description": "This bot is part of a Web3 monitoring tool designed to detect suspicious activities on the Polygon blockchain related to position openings on a perpetual trading contract. When an account opens a high number of trading positions within a specified time frame, this is considered unusual behavior and triggers an alert.The bot is composed of several JavaScript files with specific roles:1. `agent.spec.js`: It contains the test suite for the bot. The tests check that the bot behaves correctly, ignoring irrelevant events, and detecting when an account opens many positions in a short time frame on the Perp Trade Facet contract.2. `agent.config.js`: This file defines configuration variables for the bot, such as the number of position openings (`positionsNumber`) that should trigger an alert, the block number range (`blockNumbers`) to monitor, the address of the contract to monitor (`POOL_DIAMOND_ADDRESS`), and the ABI of the event (`INCREASE_POSITION_EVENT`) to look for.3. `utils.js`: Provides utility functions and constants to the bot, like the provider instance for accessing the blockchain (`provider`), an interface object for decoding events (`EVENTS_IFACE`), and a function for creating findings (`createFinding`).4. `agent.js`: This is the core of the bot that contains the `handleTransaction` function. It filters for `IncreasePosition` events emitted on the Perp Trade Facet contract within the specified block range. If an account is found to have opened a number of positions greater than or equal to the set threshold, a finding is created.The findings generated by the bot include the following data:- The name of the detection strategy (opening many positions within a certain time frame).- A description which includes the account address that triggered the alert and the number of positions opened.- An alert ID that is unique to this specific behavior detection.- Severity level, which is always set to \"Medium\" for this kind of suspicious activity.- Type of finding, always set to \"Suspicious\".- Metadata including the account address and the number of opened positions.The source code checks the provided logs within the designated time block to detect accounts exceeding the threshold of 50 position openings, assigning findings accordingly for further action or review. The bot is specifically designed for the Polygon blockchain and would generate an alert with an ID `Perp-88-3` indicating a medium severity for each account opening multiple positions in the defined timeframe.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x843b5c3e9f546839208ead399b4c313d3a536b3b66fb61b8cb700dd2425bb6c1",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Impossible Finance - staxMigrate",
    "description": "The purpose of the specific web3 bot, described using the Impossible Finance staxMigrate mint bot, is to detect and alert when tokens are minted in a potentially fraudulent way through the staxMigrate function in the Impossible Finance protocol on the Binance Smart Chain. Specifically, it looks for instances where the amount of STAX tokens used as input to the staxMigrate function is different from the amount of IF tokens that are output from the function, which could indicate an exploit. If such an event occurs, the bot issues an alert with a high severity level and tags it as an \"exploit.\" The metadata attached to the alert includes the receiver's address, the amount of input STAX tokens (staxAmountIn), and the amount of output IF tokens (ifAmountOut).The source code provides more insights into how the bot functions:- It is implemented using JavaScript and utilizes the Forta agent framework, which provides the infrastructure for detecting and alerting on on-chain activities that could signify malicious behavior or vulnerabilities.- The bot listens for `Transfer` events from the Impossible Finance's IF token smart contract address.- It identifies minting events specifically, which are characterized by the `from` argument in the `Transfer` event being the zero address (indicating token creation).- For each minting event, it checks whether there is a corresponding `staxMigrate` function call with the same amount of tokens. If the input and output amounts do not match, a finding is created.- A finding contains details such as the metadata mentioned in the bot's description and tags the activity as a high-severity exploit.By monitoring for discrepancies between token input in the staxMigrate function and the minted IF tokens, the bot serves as an early warning system to identify suspicious activity that can then be investigated further.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xe04b3fa79bd6bc6168a211bcec5e9ac37d5dd67a41a1884aa6719f8952fbc274",
    "developer_id": "0xad7547d09015664943d0A7c1BeA47f28dF298EC0",
    "name": "victim-notification",
    "description": "The purpose of the \"Victim Notification Bot\" is to detect and alert when specific addresses (presumed victims) receive on-chain notifications from predetermined notifier addresses. These notifications suggest that the receiver may have fallen victim, for instance, to a scam or a hack. The bot operates on all EVM compatible chains and triggers an alert of type `VICTIM-NOTIFICATION-1` with severity and type set to \"info\" when such a notification is received.From the provided Python source code, the bot uses the `forta-agent` framework to identify these victim notifications in blockchain transactions. When a transaction comes from an address on the `VICTIM_NOTIFIER_LIST` and includes data\u2014presumably a warning message\u2014it generates a `VictimNotificationFinding` alert. This alert includes labels to denote the victim's blockchain address, chain ID, alert type, and the notifier's address. The alert rates and additional information are calculated based on the transaction data and included within the alert metadata.The purpose is to highlight potentially harmful activities and support downstream processes such as false positive mitigation or intelligence development. The test scripts provided with the bot allow the testing of this functionality against both real and mocked blockchain data.The full logic of this functionality is maintained in the `agent.py` script and tested using the `agent_test.py` script. The `constants.py` holds reference data for the bot, and `storage.py` manages secret data and accesses an external owner database, presumably for configuration or state-checking. The `web3_mock.py` script is used to simulate web3 behavior during testing.",
    "version": "0.0.7"
  },
  {
    "bot_id": "0x11db1fd1f086ce3e09fd6f64847ce7087a18f191ce5d580ac2c4c69e591dbf69",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Transfer DAO Proposal",
    "description": "The purpose of the web3 bot described in the text is to monitor decentralized autonomous organizations (DAOs) on various blockchain networks for proposals to transfer large amounts of the respective native tokens (like ETH, BNB, MATIC, AVAX, FTM). When it detects such a proposal, it generates an alert with medium severity and marks it as suspicious.Based on the description and source code provided:- The bot supports the following chains: Ethereum, BNB Chain, Arbitrum, Optimism, Polygon, Fantom, and Avalanche.- An alert is triggered when a large transfer proposal is created within any DAO on the supported chains.- The alert's metadata includes the DAO address, proposer's address, proposal ID, receiver's address, and the amount to be transferred.The alert is labeled `LARGE-TRANSFER-PROPOSAL` and includes the following structure:  - Name: \"Large Transfer Proposal Created\"  - Description: A message including the amount and token specified for the transfer, such as \"A large transfer of X ETH has been proposed in DAO Y\"  - Alert ID: \"LARGE-TRANSFER-PROPOSAL\"  - Severity: Medium  - Type: Suspicious  - Metadata: dao, proposer, proposalId, receiver, amountThe provided source code `agent.js` defines the logic of handling incoming transactions (`handleTransaction` function) and searching for `ProposalCreated` events according to a specific Solidity event signature. When it detects such an event, it checks if the amount proposed for transfer exceeds a predefined threshold for the respective blockchain (defined in `CONFIG_PER_CHAIN`) and if so, it generates a Finding.The `agent.spec.js` file appears to be including tests for the bot's functionality, including ensuring no findings are returned when there is no `ProposalCreated` event, when the amounts are under the threshold, and the correct findings are returned when a large transfer is proposed.As of the knowledge cutoff date in April 2023, specific threshold amounts for large transfers are set for various networks, for instance:- Ethereum, Arbitrum, and Optimism: 2 ETH- BNB Chain: 15 BNB- Polygon: 6000 MATIC- Avalanche: 300 AVAX- Fantom: 17000 FTMThese thresholds are presumably set to filter out smaller, more routine transfers and focus on significant proposals that could potentially impact the DAO or its token's value.Please note that this summary is based on the provided description and source code snippets. If further details are provided, such as deployment scripts or configurations, the bot's functionality might extend beyond the capabilities discussed here.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xac82fb2a572c7c0d41dc19d24790db17148d1e00505596ebe421daf91c837799",
    "developer_id": "0xad7547d09015664943d0A7c1BeA47f28dF298EC0",
    "name": "Attack Detector Feed (beta)",
    "description": "The Attack Detector provides real-time alerts regarding smart contract exploits - prior to, during or directly after the attack. It is collectively maintained by the Forta Foundation, Nethermind and members of the Forta developer community. Utilizing cutting edge smart contract exploit and advanced anomaly detection powered by advanced ML models, the Attack Detector monitors activity along the exploit lifecycle (funding, preparation, exploitation, money laundering) and emits high confidence alerts during these 4 stages of an attack. Used by DeFi protocols, institutional investors, hedge funds, and other industry participants with direct or indirect exposure to DeFi smart contract risk. Attack Detector alerts are emitted in real-time to your preferred communication channel (webhook, Slack, TG, etc.), giving your team the crucial lead time to respond. Read about how the Attack Detector fired several early warning alerts on multiple incoming attacks such as the $197 M Euler exploit. Learn more in the documentation below, and request a free trial today.The provided code consists of multiple parts that involve detecting attacks on Ethereum-like smart contract protocols in real-time and handling false positives within the Web3 ecosystem. Below is a summary of the purpose of specific components within the codebase:1. **Attack Detector Feed**: This bot detects real-time attacks on smart contract protocols, mapping each alert to four stages of attack: Funding, Preparation, Exploitation, and Money Laundering. It combines alerts from various base bots to increase precision, utilizing both anomaly detection and heuristic approaches.2. **DynamoUtils**: A Python class for interacting with DynamoDB. It facilitates creating and expiring items associated with detected attacks and entities. It also allows reading and deleting saved items.3. **Findings**: A Python module with methods for creating findings. These findings are alerts with additional structured information that help users understand detected activities within the blockchain ecosystem.4. **BlockChainIndexerService**: A service that interacts with Ethereum-compatible blockchains (like Polygon or BSC) to retrieve contract information and helps in identifying contract addresses related to a specific deployer address.5. **L2Cache**: A caching layer that facilitates persisting and loading data across transactions and blocks, aiming to keep track of the state used by the bot.6. **Utils Test**: These are test cases for utility functions that are likely used throughout the bot's operation. They cover address validation, contract checks, etherscan label retrieving, and other helper functions.7. **DynamoUtilsTest**: These are unit tests for the `DynamoUtils` class to ensure that interactions with DynamoDB are functioning as expected.8. **Constants**: A Python module containing various constants like thresholds and keys that are used throughout the bot's logic.9. **BlockchainIndexerServiceMock**: A mock service for unit tests that represents the `BlockChainIndexerService` and allows for testing without making actual external calls.10. **AgentTest**: This module includes unit tests for the agent that detects attacks. These tests verify that the bot logic functions correctly under various conditions and that alerts are appropriately generated or suppressed.11. **Agent**: The main agent script that integrates all components and detects security incidents or attacks based on incoming alerts. It processes these alerts, checks for patterns that might indicate an ongoing attack, utilizes caching and persistence to remember state, and emits findings accordingly.12. **Web3Mock**: A mock of the Web3 class used for interaction with Ethereum smart contracts, meant for testing purposes without making actual blockchain calls.13. **BlockchainIndexerServiceTest**: Unit tests for verifying the functionality of the `BlockChainIndexerService`, ensuring that it can correctly identify contract addresses deployed by a given address on supported blockchains.14. **Tabular**: A class for predicting false positives (FP) using trained machine learning models.15. **FPMitigator**: The FP (False Positive) Mitigator class uses models to predict and potentially mitigate false positive alerts.16. **DownloadData**: A class for downloading and formatting data related to transactions and addresses for subsequent analysis.17. **Autoencoder**: A script defining a model for encoding graph data, which can be useful for anomaly detection or other analysis purposes in the context of a blockchain.18. **FPMitigator**: The FPMitigator class utilizes the models to detect potential false positives in the alerts being processed.Combined, these components construct a bot that listens for alerts from Web3, processes these alerts to detect multifaceted attack patterns, handles false positives, and manages related state across the analysis. The bot works within the Forta detection network for real-time detection of security incidents on the blockchain.",
    "version": "3.51.3"
  },
  {
    "bot_id": "0x112eaa6e9d705efb187be0073596e1d149a887a88660bd5491eece44742e738e",
    "developer_id": "0x6Ec4b84aEB75eE330876FFFecA65cB635b41ED76",
    "name": "scam-notifier-bot",
    "description": "Purpose of the Web3 Bot (SCAM NOTIFIER BOT):The bot is designed to monitor on-chain transactions and alert users of potential scam activities. It scrutinizes transactions to detect suspicious behavior and flags addresses that are potentially related to scams. It does so by monitoring the transaction data for messages that might be indicative of a scam, like \"honeypot\" or \"phishing\" alerts, and checks if the sender is already known as a \"notifier\" (an address that has previously flagged scams). Depending on the content and the sender's status, it creates various types of alerts (SCAM-NOTIFIER-EOA, SCAM-NOTIFIER-CONTRACT, VICTIM-NOTIFIER-EOA, NEW-SCAM-NOTIFIER), and it can promote a regular address to a notifier status if it flags at least two scam addresses.The bot uses a Neo4j database to store scam-related transactions and keeps track of both notifier addresses and potential scam addresses. The bot supports transactions on the Ethereum blockchain. Each alert includes a description of the suspicious activity with high severity and suspicious/exploit type, and it involves metadata such as the addresses involved and any relevant messages.Without access to the source code bounded by triple quotes, I cannot summarize the actual implementation. However, based on the description provided, it seems that the bot aims to interact with on-chain data and off-chain databases, analyze transactions, and produce alerts that can help users stay informed about possible scams happening in the Web3 space.",
    "version": "1.0.1"
  },
  {
    "bot_id": "0xc10fe54aa93d43702eece2c439550ee079b5fa045aa03e08d47df6a3837e172b",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Multichain ALTA Bridge",
    "description": "The purpose of the Large Balance Decrease Bot is to monitor blockchain protocols and alert users when a significant decrease in the protocol's token balance occurs. This could indicate potential exploits or malicious activities. The bot is designed to work on multiple chains including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche.The bot specifically emits two types of alerts:1. BALANCE-DECREASE-ASSETS-ALL-REMOVED: Triggered when the token balance of a protocol is completely drained. This alert has a \"critical\" severity level and is classified as an \"exploit.\"2. BALANCE-DECREASE-ASSETS-PORTION-REMOVED: Triggered when there's a significant portion of the token balance removed from a protocol. This alert has a \"medium\" severity level and is also classified as an \"exploit.\"Each alert includes metadata, such as the transaction hashes and the impacted asset, as well as an anomaly score that represents the proportion of transactions involving balance decrease relative to all token transfers for the monitored address.Moreover, the bot uses labels to categorize entities related to the detected event, with high confidence levels of suspicion (0.9 for when all tokens are removed and 0.7 for partial removal), and assigns roles like \"Victim\" or \"Attacker\" to addresses involved.Users can test the behavior of the bot using specific commands, as detailed in the description provided.Looking into the source code (JavaScript using Node.js) associated with this bot, we see the following key components:- `agent.spec.js`: This file contains unit tests for the bot agent, which simulate different scenarios to validate that the bot logic correctly identifies the balance decrease incidents.- `persistence.helper.js`: This helper module is responsible for saving the state of the bot's data and retrieving it. It uses `node-fetch` to store and retrieve data from a remote database or from a local node environment.- `persistence.helper.spec.js`: Contains unit tests for the persistence helper to ensure the reliability of its data storage and retrieval functionalities.- `agent.js`: The core of the bot's implementation, it defines two alerts (`BALANCE-DECREASE-ASSETS-ALL-REMOVED` and `BALANCE-DECREASE-ASSETS-PORTION-REMOVED`), initializes the bot state, and contains logic for monitoring transactions to detect balance decreases (`handleTransaction`) and handle block events (`provideHandleBlock`). The bot uses an ARIMA time series model for anomaly detection to analyze the time series data of asset withdrawals.From the above, we can conclude that the bot is designed to track asset balances of specified contracts on different chains, alerting to potential theft or unusual activity that might warrant attention or investigation.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0x59cc55fc71711d81d99be376618e072fa34e1ddbda7401840542d9a584a78d08",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Aurora ERC20 Locker",
    "description": "This Web3 bot is designed to monitor various blockchain platforms for significant decreases in the balance of a protocol's token holdings. It supports Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. The bot generates critical alerts tagged as \"exploits\" when the entirety of a token balance is drained from a protocol (labeled as BALANCE-DECREASE-ASSETS-ALL-REMOVED) and medium-severity alerts when a significant portion is removed (labeled as BALANCE-DECREASE-ASSETS-PORTION-REMOVED). Each alert contains metadata such as the first and last transaction hashes involved, the impacted asset, the anomaly score, and various labels indicating suspicious transactions, the victim, and the attacker.The source code of the bot is a Node.js application using the Forta agent toolkit. It contains several JavaScript files:- `agent.spec.js`: Includes unit tests for the bot's transaction handling and block processing logic.- `persistence.helper.js` and `persistence.helper.spec.js`: Handle persisting and loading data, working both with an external database URL configured by a given environmental variable or a local file system, depending on the presence of a \"LOCAL_NODE\" environmental variable. Unit tests are also included for this helper module.- `agent.js`: The main bot logic that uses the Forta agent SDK to detect and report findings.The `agent.js` file implements the main functionality. It initializes persistence helpers with specific unique keys for transactions, removed assets, and total transfers for persistence purposes and stores the balances and timeseries of all monitored assets. The bot employs an ARIMA model to predict expected asset balances and create an anomaly threshold.The bot has two main functions:- `handleTransaction`: Listens for transfer events of tokens to and from a specific address. If a token balance is completely drained, it issues findings with critical severity. Transaction hashes, asset impacted, and anomaly scores are included in the findings.- `provideHandleBlock`: On every block, it checks if the period specified in the aggregation time has passed to determine if an anomaly in token balances exists as per the model's prediction.The bot uses labels for findings to categorize entities such as transactions and addresses with confidence scores. For example, suspicious transactions or the designated victim and attacker addresses are labeled accordingly with high confidence levels.The bot's effectiveness in detecting balance decreases relies on its machine learning model, persistence in storing historical data, and real-time transaction monitoring to provide rapid alerts in critical situations such as token theft or contract exploitation.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0xb160648fb6aa9c4d4f38d2d736701fe5066ccbb14679b89ae02833919b1b3161",
    "developer_id": "0x6aea36C4a9Cf8AC053c07E662fa27e8BDF047121",
    "name": "lido-steth-alerts",
    "description": "The specific code and description provided define a \"Lido Detection Bot\" for the Forta web3 monitoring framework, designed to detect and alert on specified events related to the Lido decentralized finance (DeFi) protocol on the Ethereum network. This bot works with both the Ethereum mainnet and the Goerli testnet and consists of sub-bots that target different areas of the Lido protocol, including its gate seals, stETH operations, vaults, and withdrawal processes.The sub-bots and their alerts are categorized as follows:- **Gate-seal** sub-bot: Detects issues related to gate seals such as expired gate seals, gate seals without the correct roles, and gate seals without a pause role.- **stETH-ops** sub-bot: Monitors Lido's stETH operations such as low staking limits, a high number of depositable ETH, and unexpected buffer drains.- **Vaults** sub-bot: Monitors vault-related metrics such as balance changes and unexpected drains in withdrawal vaults and EL vaults.- **Withdrawals** sub-bot: Monitors the withdrawal process for anomalies like a high number of unfinalized requests or too many unclaimed requests.The source code contains various JavaScript files that define specific functionality for the bot, including the logic for handling transactions and blocks, managing constants and configurations, and utility functions to support the bot's operations. This bot likely uses the Forta agent development framework, which aids in building and deploying decentralized watchdogs to monitor and secure DeFi applications.Key points in the source code describe handlers for initializing the bot, processing blocks, and managing transactions, as well as scripts for testing the bot in both mainnet and testnet environments. The code also imports required libraries and contracts to interact with the Ethereum blockchain and listen for events that match the predefined alert scenarios.Overall, the Lido Detection Bot serves as an automated security mechanism that could alert developers or stakeholders of potential issues concerning smart contracts within the Lido ecosystem.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x399792adf7b57c0adc8de54ee27284d8ef70b0af2ff3c2c97f69ae894f66759a",
    "developer_id": "0x6aea36C4a9Cf8AC053c07E662fa27e8BDF047121",
    "name": "lido-validator-set-alerts",
    "description": "The web3 bot is designed to monitor and alert on various events within the Lido Finance ecosystem, covering different aspects such as Accounting Oracle, Exitbus Oracle, Lido Report, Node Operators Registry, Oracle Daemon Config, Sanity Checker, MEV relays, and more. It supports both Ethereum mainnet and Goerli testnet, utilizing a system of sub-bots (modules) for different monitoring tasks.Each sub-bot is responsible for specific events, such as member low balance, overdue reports, vault overfills, relay status changes, etc. These sub-bots trigger alerts based on predefined conditions and thresholds.To test and monitor specific blocks, transactions, or ranges, the bot uses the provided 'yarn' commands with 'forta.config.json' configuration. It ensures compatibility with testnet by adjusting contract addresses and variables.The bot's source code includes modules for handling different aspects of the system, managing transactions, filtering events, and generating findings (alerts). Event handlers process blockchain data and create structured findings that describe the observed activity's nature and relevance.The constants define chain-specific parameters, addresses of smart contracts, and events of interest, allowing the bot to respond to changes within the Lido ecosystem accurately. Reusable utility functions help handle tasks like merging findings, formatting delays, and creating links to Etherscan for ease of reference.The code structure suggests a maintainable and modular approach to monitoring a complex DeFi ecosystem, with components tailored to the needs of different Lido Finance protocols.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x5514223d7d7bf9b1ec1eb5981eb471cb8eb7756fc615ca282de9a157b126694f",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Wormhole Portal Token Bridge",
    "description": "Purpose:The \"Large Balance Decrease Bot\" is designed to monitor the balance of a protocol and detect significant decreases in token balances or a complete drainage of assets. The bot alerts users to potential exploits or critical issues when substantial or complete token withdrawals are identified.Description:- Monitors the balance of a protocol on various blockchain networks including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche.- Issues critical alerts when the balance is completely drained (BALANCE-DECREASE-ASSETS-ALL-REMOVED).- Issues medium severity alerts when there is a significant portion of asset removal (BALANCE-DECREASE-ASSETS-PORTION-REMOVED).- Utilizes an anomaly detection score to quantify alerts based on historical data.- Provides labels that categorize entities involved in a transaction, such as whether they are suspicious or are victims of an attack.Source Code:The provided source code primarily includes:- agent.spec.js: Unit test cases for the bot's behaviors, such as checking the filtering of transfer events, execution of transactions, and proper functionality during changes in balance.- persistence.helper.js: Helper functions to persist and load data from a database or local file system; handles POST requests to a database if running remotely or saves to a local file if LOCAL_NODE is enabled.- agent.js: Core functionality including initialization, transaction handling, and block handling. The logic involves filtering events that affect the monitored contract, calculating balance changes, and creating findings for critical or significant changes in the balance. Also integrates with ARIMA models for predicting and detecting anomalies, and persists data periodically for monitoring trends.In summary, this web3 bot operates as a security tool that observes a list of supported blockchains, monitors balances of specified protocols, and raises alerts based on predefined criteria related to asset decreases. Its source code includes mechanisms for data persistence and analytics, as well as tests to ensure correct operations.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xac3033413b66c3d33cd28cfc90c0b05e35c8c4084efa8b8b9dad82396e607f42",
    "developer_id": "0x389dC58784bd5c820bf4dc263935C6576131b0A0",
    "name": "saddle-reward-spa-bal-monitor",
    "description": "Purpose of the Web3 Bot:From the description provided, the purpose of the bot is to monitor and detect transactions involving large Tether (USDT) transfers on the Ethereum blockchain. If the transaction includes a transfer of more than 10,000 USDT, the bot fires an alert, which is of 'low' severity and 'info' type. This bot is useful for tracking significant value transfers of Tether, which could be relevant to analysts, researchers, or security teams interested in the flow of stablecoins on the network.The source code provided, however, does not exactly match the description. The source code snippet is intended to monitor a specific account's balance of a token (identified as SPA in the code). If the balance of the account goes below a predefined threshold (10000 SPA), the bot creates a finding with severity `Info` and type `Suspicious`.Key points from the source code analysis include:- The monitored account's address is `0x492ebE7816B6934cc55f3001E1Ac165A6c5AfaB0`.- The SPA token address is `0x5575552988A3A80504bBaeB1311674fCFd40aD4B`, and its contract ABI is provided to interact with the contract.- The bot uses bignumber.js library for accurate arithmetic with large numbers.- Alerts are created as `FORTA-6` when the balance of SPA in the monitored account is below the threshold.- The bot appears to be designed for the Polygon network (as SPA is mentioned to be an address on Polygon).Unfortunately, there is a mismatch between the bot's description and the provided source code. The description pertains to a bot for detecting large Tether transactions on Ethereum, while the source code pertains to monitoring the SPA token balance on an account, possibly on the Polygon network. The two do not seem to be related, and it's likely that the source code provided does not belong to the \"Large Tether Transfer Agent\" bot but to a different bot with separate functionality.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xe0e429e17144357d0a902ed640a583a4363a187019f09ca9a5cd79411756b1fa",
    "developer_id": "0x6F4DbB1ABd65fDf3705fD064059052421a03b48c",
    "name": "ethereum-huge-tx",
    "description": "The bot \"Lido Huge TX Monitor\" is designed to monitor Ethereum's mainnet for transactions that involve large token transfers, including substantial changes in balances within particular vaults. Its primary purpose is to alert whenever there is a significant amount of token movement in a single transaction or large balance shifts in DeFi vaults related to Lido, which is a liquid staking solution for Ethereum.The bot identifies the following scenarios to issue alerts:- HUGE-TOKEN-TRANSFERS-IN-SINGLE-TX: Large token transfers detected within a single transaction.- HUGE-TOKEN-TRANSFERS-TECH: Detailed transfer information for technical purposes; this is not routed to the alert channel.- HUGE-VAULT-BALANCE-CHANGE: A large change in the balance of AAVE or Maker vaults within the past 15 minutes.To run the bot, it uses a JSON-RPC provider URL specified in the `~/.forta/forta.config.json`. Dependencies can be installed using `yarn install`, and the bot can be started for development using `yarn start:dev`. It can also test specific blocks, block ranges, or transactions using the provided `yarn` commands followed by block numbers or transaction hashes.The source code includes several JavaScript (TypeScript transpiled) modules:1. `version.js`: Provides bot version information.2. `ethers.js`: Provides an Ethers provider object by calling `getEthersProvider()` from the `forta-agent` library.3. `agent.js`: The core logic that initializes the bot, processes timeouts, and handles both block and transaction events.4. `constants.js`: Defines various constants, address mappings, event ABIs, and transfer patterns used for monitoring.5. `agent-huge-tx.js`: Contains the specific handler logic to analyze transactions and emit findings based on the identified patterns of large transfers.6. `utils.js`: Provides utility functions for the bot such as number abbreviation, metadata preparation, handling complex transfer scenarios, and others.The bot uses yarn for package management and relies on the `forta-agent` library for blockchain interaction, while also utilizing additional scripts and JSON files such as `version.json` for version tracking and `ERC20balance.json` for querying ERC20 balances. It includes functionality for listening to specific smart contract events and interpreting these events to report on notable activities as defined in its monitoring logic.",
    "version": "1"
  },
  {
    "bot_id": "0x6639e223026aaec3c2c2e33c3a501f34e7a63e3c16d301f4f1ba0044135387e8",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Hop Protocol SNX Bridge",
    "description": "Purpose of the Web3 Bot:The web3 bot described in the provided text is named \"Large Balance Decrease Bot\". Its main purpose is to monitor and detect significant decreases in the token balances of protocols across various blockchain networks. The bot supports multiple chains including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, Avalanche, and more.It fires an alert with different severity levels based on the extent of the balance decrease:1. BALANCE-DECREASE-ASSETS-ALL-REMOVED: Triggered when the balance is completely drained, considered a critical severity, and classified as an exploit.2. BALANCE-DECREASE-ASSETS-PORTION-REMOVED: Triggered when a significant portion of the balance is removed, deemed a medium severity, and also classified as an exploit.Both alerts come with metadata including the hash of the first and last transaction of the period, the drained asset, and an anomaly score indicating how out of the ordinary the alert is. They also include labels which classify transactions and address entities involved as \"suspicious\" or \"victim\" with a confidence score.Source Code Analysis:The source code provided defines the bot's operation using JavaScript and the Forta Agent SDK for blockchain monitoring. The bot's configuration is imported from a separate config file, and it is designed to work with the Ethereum network.The bot is built around several key functions:- `handleTransaction` analyzes individual blockchain transactions to detect and report whenever a token balance is completely drained.- `provideInitialize` serves as an initializer for the bot, fetching initial parameters like network identifiers and previous transaction counts from a persistence layer.- `provideHandleBlock` checks for significant balance decreases over time.The code makes use of event filters, Ethereum smart contract interaction, and anomaly detection via time-series data, employing an ARIMA (AutoRegressive Integrated Moving Average) model for the latter.The bot's functionality is separated into an event handler for processing individual transactions and a block handler for periodic balance decrease checks. Persistent state management is implemented to track event counts across blocks.The unit tests use mocks to simulate transactions and configuration parameters for verifying the bot's correct behavior.The persistence helper, defined in a separate module, handles data persistence and retrieval using either a provided database URL or local file storage, depending on the environment setup.In conclusion, this Large Balance Decrease Bot is intended to provide critical security alerts for protocols when a suspicious draining of assets occurs, aiding in the detection of potential exploits and vulnerabilities in real-time.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x76a022f5953ac0e06bfcc393a9fc6e1e6ef24b01b200d576944fc26f792b5651",
    "developer_id": "0xc5924Db956E47bfe3E33C00d3147e976638ea0Da",
    "name": "Idle PYTs tranche virtualPrice decrease",
    "description": "Purpose of the Web3 Bot:The bot is designed to monitor the virtual prices of the AA (senior) and BB (junior) tranches of Perpetual Yield Tranches in the DeFi ecosystem provided by Idle Finance's CDOs (Collateralized Debt Obligations). Specifically, it detects and alerts when there is a decrease in the virtualPrice of any tranche, which could be indicative of problems within the tranche or potential manipulation. The bot operates on the Ethereum blockchain.Key Points from the Description:- The bot detects decreases in the virtualPrice of tranches.- It supports the Ethereum blockchain.- It creates critical severity alerts categorized as suspicious when the virtualPrice has decreased.- The alerts include metadata like the current and old price, the tranche type (AA or BB), and the token's symbol.Key Components from the Source Code:- `agent.js` is the main script that orchestrates the bot's logic. It initializes the data by fetching the current CDOs and their associated prices.- Every time it handles a block, it checks if the virtualPrice of either the AA or BB tranches has decreased compared to the last recorded price.- If a decrease is detected, an alert is generated with relevant metadata, including tranche type and price information.- `helper.js` contains utility functions to fetch CDO information and tranche virtual prices using a combination of direct API calls to The Graph and multicall contracts.- `agent.spec.js` includes unit tests to ensure the bot functions correctly, simulating both scenarios where the price has not decreased and where it has decreased.Functionality Flow:1. The bot uses The Graph to query for CDOs' current statuses and filters out any excluded CDOs.2. It establishes contracts to interact with the blockchain and fetches the virtualPrice for both AA and BB tranches.3. The stored prices are compared to the latest prices fetched during the block handling process.4. If there is a drop in the virtualPrice, it generates a Finding object, culminating in an alert that signals a critical and suspicious event.5. The alert provides detailed information about the price decrease event, critical for maintaining transparency and alerting stakeholders of potential risks in the DeFi tranches being monitored.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0xe4a8660b5d79c0c64ac6bfd3b9871b77c98eaaa464aa555c00635e9d8b33f77f",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Asset Drained",
    "description": "The bot identifies instances where a contract's assets have been significantly depleted, reaching a threshold of 99% or more within a single block. By closely monitoring the transfers of both ERC20 tokens and native tokens from contracts, the bot raises an alert when it detects a rapid reduction in a contract's balanceThe bot is designed to detect asset drainage in smart contracts. It monitors ERC20 and native token transfers to identify if 99% or more of a contract's assets have been drained within a single block, which might suggest malicious activity such as an exploit or hack.The bot operates on a range of blockchain networks, including Ethereum, Optimism, BNB Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. It triggers an alert defined as \"ASSET-DRAINED\" with high severity and a suspicious type when a contract's asset balance reduces by 99% or more either in value above $10,000 or over 5% of the token's total supply.Metadata such as the contract's address, affected asset, involved external owned account (EOA) addresses, the pre-and post-drain balances, transaction hashes, block number, and an anomaly score is included in the alert. The anomaly score is calculated based on the occurrence of drained asset transactions relative to all ERC20 transfers the bot has processed.There are also labeled addresses identifying the victim and the suspected attacker. The labels come with a confidence score, with the victim's address having a confidence score of 1 and the attacker's address having a confidence score of 0.5.The bot includes a sub-type \"ASSET-DRAINED-LIQUIDITY-REMOVAL\" specifically for cases where the asset drain was due to liquidity removal.The bot provides extensive metadata in its alerts to help investigators analyze the incident further.The source code for the bot is split into multiple files, with `agent.spec.js` containing unit tests, `agent-performance.spec.js` containing performance tests, and `address-type.js`, `helper.js`, and `agent.js` containing the actual logic for detection and monitoring. The `helper.js` file, for example, includes functions for getting token symbols, value in USD, and total supply, among others, while `agent.js` defines handlers for initializing, processing transactions, and processing block events.The `storage.js` file is used to manage the retrieval of secrets required for the bot's operations, fetching data from an owner's database or local files based on the environment setup.In summary, the purpose of the bot is to detect large, suspicious asset drains in smart contracts to alert users or platforms of potential exploits. Its source code shows a structured approach to alert generation, metadata inclusion, and a testing suite ensuring its reliability.",
    "version": "0.2.6"
  },
  {
    "bot_id": "0xd7cc7184761e725e0f3ee947af4908b8f3e65cfdc559f10c584858a9162f2efa",
    "developer_id": "0x928C20d08d9Bd9CA1F427649f5115DdE79aEF204",
    "name": "minimum-balance",
    "description": "The web3 bot is a security agent designed to monitor and report wallet balances for a series of fleet_keys and pink_panther accounts on different networks, such as Ethereum (ETH), Binance Smart Chain (BSC), and Polygon (MATIC). It performs periodic checks to determine if the balance of any monitored wallet has fallen below a defined minimum threshold. If a low balance is detected, the bot generates an alert. It also sends an alert with all current balances at a predetermined time each day.The bot leverages the Forta Agent framework, a well-known platform for running security agents on blockchain networks. Users can customize the bot by setting minimum balance thresholds and the wallets they want to monitor.The key components in the bot's configuration are:1. `MIN_BALANCE` variables for each network designate the minimum allowable balance before an alert is triggered, specified in the network's native currency, such as ETH, BNB, and MATIC.2. Fleet_keys and Pink Panther addresses, which appear to be some category of important wallet addresses for the organization running this bot.3. Timers which ensure the bot checks the wallet balances at certain intervals, with specific intervals to print out a full report of balances (once per day at a specific hour and minute, for example).4. The bot is capable of checking the balances through JSON-RPC calls to the blockchain, requiring the bot to be connected to a node or a service that provides access to the blockchain.The bot's source code is written in JavaScript and heavily uses asynchronous functions (`async/await`) to handle asynchronous operations such as RPC calls to the blockchain. It appears to use the Forta Agent SDK (`forta-agent`), as well as the Ethers.js library, which is a common library for interacting with Ethereum and other EVM-compatible blockchains. Additionally, the code uses BigNumber.js for safe numerical operations with large numbers, which are typical when working with blockchain-related calculations. The bot is designed to be run in a Node.js environment and can be started with commands like `npm start` after providing a proper JSON-RPC provider URL in the `forta.config.json` file. ### Testing and ExecutionThe source code suggests that the bot can be tested using `npm test`, indicating a test suite is likely prepared for ensuring code correctness. The bot's execution is controlled through typical npm commands and depends on the `forta-agent` framework for runtime execution.### AlertsThe agent is designed to create alerts with detailed messages explaining the low balance issue, including the wallet address, the current balance, the expected threshold, and relevant metadata. These alerts likely would be pushed to some security monitoring dashboard or communication platform where the relevant parties can take action.Overall, the bot serves as an automated system for maintaining financial security and operational readiness by ensuring key wallets maintain sufficient balances to conduct their intended functions.",
    "version": "1.5"
  },
  {
    "bot_id": "0x8732dbb3858d65844d940f5de3705b4161c05258bdfedf1ff5afb6683e1274e5",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "nft-wash-trade-funding-origin",
    "description": "Unfortunately, due to the format provided, I'm unable to analyze actual source code. I can, however, provide a summary based on the description you provided.The NFT Wash Trade Bot is designed to detect and alert users of potential wash trades in the NFT market. A wash trade is a form of market manipulation where a seller is involved in buying their own NFTs indirectly through self-financed transactions to create a misleading appearance of market activity. Specifically, the bot looks for situations where the buyer's wallet was funded by the seller's wallet.The bot is designed to support the Ethereum blockchain and raises a medium-severity, suspicious-type alert when it identifies what it considers to be a wash trade.It comes with the capability to be tested using provided test data and by running specific configurations (by setting up `bot-config.json`, adjusting the Ethereum network provider, chain ID, and running validation and transaction commands). The bot produces findings with detailed metadata including the suspected buyer and seller wallets, the token ID, collection name, exchange name, and an anomaly score that quantifies the suspicious activity.The bot also labels entities involved in the transaction with a high degree of confidence, marking the addresses related to the buyer, seller, and the NFT in question as participants in the suspected wash trade.If actual source code were available and provided within the specified format, we could delve into the specifics of how the bot implements its detection algorithm. However, based on the description, the purpose and functionality of the bot is to serve as a watchdog in the NFT marketplace, flagging potentially fraudulent trading activities such as wash trades for further scrutiny or action.",
    "version": "0.1.6"
  },
  {
    "bot_id": "0xe1a6edcc4fbc912198675d7feb9cee45c7d506d50a1cfa271e3df6ed02c68fd9",
    "developer_id": "0xad7547d09015664943d0A7c1BeA47f28dF298EC0",
    "name": "phishing-scam-detection-ml-bot",
    "description": "Purpose:The described web3 bot is designed to identify potential phishing scammers on the Ethereum blockchain using machine learning (ML). It deploys an EasyEnsembleClassifier with lightbgm (Light Gradient Boosting Machine) classifiers for this purpose. The bot aims to enhance financial security within the Ethereum ecosystem by detecting addresses (Externally Owned Accounts, EOAs) involved in phishing activities.Functionality:- The bot evaluates transactions to determine if the involved EOAs are phishing scammers.- It features an ensemble approach using the EasyEnsembleClassifier to handle imbalanced datasets (small percentage of phishing addresses).- The model uses a variety of features related to addresses\u2019 transaction patterns and behaviors (such as the number of transactions, block numbers, value transferred, and transaction stats of 1-degree neighbors).- The ML model outputs a score between 0 and 1 for each address, with scores closer to 1 indicating a higher likelihood of the address being a phishing scammer.- The bot employs a MODEL_THRESHOLD to trigger alerts; when a prediction score exceeds this threshold, the bot flags the address as a phishing scammer.- The findings include data like the transaction hash, model prediction scores, and a list of identified phishing addresses.Performance Metrics:The model exhibits the following performance metrics:- Precision: 0.69- Recall: 0.44- F1-score: 0.54These metrics are derived from evaluation against a test dataset, including recent scams from May and June 2023.Code Overview:- `agent_test.py`: Contains tests to check the bot's functionality, such as detecting if there are no findings when there are zero ETH transfers.- `agent.py`: Main file containing the bot logic. It initializes and loads the ML model, processes incoming transactions, and uses various helper functions and models to predict whether an address is a phishing scammer. It orchestrates the analysis and employs concurrency for efficient processing.- `findings.py`: Provides classes to format the findings generated by the bot to be reported by the Forta network.- `constants.py`: Contains constants such as the MODEL_THRESHOLD, which is set to 0.5, and other model-related constants.- `__init__.py`: Signals that the directory should be treated as a package.- `logger.py`: Configures logging for the application to output log messages for debugging and monitoring.- `storage.py`: Handles secure storage and retrieval of secrets and other necessary information, possibly from remote databases or local files.- `data_processing.py`: Contains functions to fetch and process data required for feature extraction used by the ML model for predictions.Supported Chains:- The bot currently supports the Ethereum blockchain.Alerts:When an EOA is detected as a phishing scammer, the finding is labeled with \"EOA-PHISHING-SCAMMER\" and includes metadata for traceability and further investigation.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xd4bf700f1d0ea6a4431b4f44fb4eabb2f4ce4486f9e6dcdb50ef779c6f4621c4",
    "developer_id": "0x2C4536B866782d2A3D0B75d66852955a8e8beB35",
    "name": "large-joins-and-exits",
    "description": "The purpose of the specific web3 bot detailed in the above description and source code is to monitor the TrueFi protocol's pools for large join (deposit) and exit (withdrawal) transactions. It operates on the Ethereum blockchain and generates alerts when it detects transactions exceeding a certain threshold amount.Here's a breakdown of the bot's functionality based on the provided code:1. **Events Monitored**: The bot listens for two types of events emitted by the TrueFi smart contracts: `Joined` events that signal a large deposit into a TrueFi pool and `Exited` events that signal a large withdrawal from a TrueFi pool.2. **Alert Generation**:    - The bot triggers a `TRUEFI-LARGE-JOIN` alert if someone deposits a \"high amount\" into a TrueFi pool.   - The bot triggers a `TRUEFI-LARGE-EXIT` alert if someone withdraws a \"high amount\" from a TrueFi pool.   - For both events, the severity is `medium`, and the type is `info`.3. **Metadata Included**:   - `account`: the address of the staker who made the transaction.   - `pool`: the name of the TrueFi pool involved in the transaction.   - `amount`: the monetary value involved in the transaction.4. **Alert Threshold**: The bot's source code sets a threshold of 10,000 units of the token (as specified by the `AMOUNT_THRESHOLD` constant) for an alert to be generated. The actual value considered as \"high amount\" is in the decimal representation as per the token's decimals.5. **Pools Information Fetching**: The bot uses a subgraph to fetch information about TrueFi pools and their addresses. It employs `ethers-multicall` to make batch calls to the Ethereum blockchain to obtain symbols and decimals of the pool tokens.6. **Helper Functions**: Two helper functions, `createJoinAlert` and `createExitAlert`, create the formatted alert findings that contain the details of the join and exit events.7. **Test Data**: Transactions `0xb5ea89273ef08ea93f31b168aba426e2350fbdbea943031367a4ae53d19dfdf7` (join) and `0x93836d546ebc32837ccb806e23348959b2672a8fe8be3a2218b4a3b5fa077a78` (exit) can be used to verify the bot's behavior with specific amounts.8. **Initialization**: The `initialize` function at the end of `agent.js` is responsible for initializing the bot by fetching the pools information.In summary, the bot is designed to help users keep track of substantial liquidity movements within the TrueFi protocol, alerting them of significant deposits and withdrawals, which could be of interest for liquidity tracking, market surveillance, or risk monitoring purposes.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x94f879d399f7fe7a06682d3abd58a955624ec08b9164c3838851bf6788d27e33",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Optimism Gateway V1 Bridge",
    "description": "**Purpose of the Large Balance Decrease Bot:**The bot is designed to monitor crypto wallets or contracts on various blockchain networks and detect significant decreases in token balances, possibly indicative of exploits. Alerts are generated for two scenarios:1. All tokens from a monitored address are removed (`BALANCE-DECREASE-ASSETS-ALL-REMOVED`).2. A significant portion of tokens from a monitored address is removed (`BALANCE-DECREASE-ASSETS-PORTION-REMOVED`).**Supported Networks:**- Ethereum- Optimism- Binance Smart Chain- Polygon- Fantom- Arbitrum- Avalanche**Alerts:**The bot supports two types of alerts, each having its metadata (like transaction hashes, impacted assets, and scores) and labels (indicating entities such as \"Transactions\", \"Address\" and entities like \"Suspicious\", \"Victim\", \"Attacker\" with associated confidence scores).1. `BALANCE-DECREASE-ASSETS-ALL-REMOVED`: Triggered when all asset tokens are drained, tagged as critical severity and of type \"exploit\".2. `BALANCE-DECREASE-ASSETS-PORTION-REMOVED`: Triggered when a significant portion of asset tokens is drained, tagged as medium severity and of type \"exploit\".**Bot Operations:**The bot's behavior involves collecting transfer events related to a configured contract address and calculating the change in token balance. If the balance drops to zero or decreases beyond the expected threshold within a specified time frame, the bot flags the anomaly and generates appropriate findings.**Data Analysis:**An ARIMA model is employed for time series forecasting to determine significant balance decreases over a set time period. Anomaly scores are calculated based on the detected incidents against total transfer transactions.**Persistence:**Database operations ensure state persistence across bot executions. The bot interacts with an external database to load and store metric values. For local testing or instances where a database is not available, it utilizes the local file system.**Bot Configuration:**The bot's behavior can be customized with settings in the `bot-config.json` file and can be locally tested with specified block numbers and contract addresses using npm commands.**Source Code Overview:**- `agent.spec.js`: Contains JavaScript unit test cases for the bot's behavior, mocking blockchain transactions and events.- `persistence.helper.js` & `persistence.helper.spec.js`: Implements a helper class to interact with the database for persisting and retrieving data, along with its unit tests.- `agent.js`: The main bot logic, implementing the functionality to handle transactions and blocks, forecast balance decreases, and to generate findings.In summary, the bot serves as a financial security tool for blockchain protocols, aiming to provide timely alerts for critical balance decrease events that could indicate an exploitation attempt, helping stakeholders to take swift remedial actions.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0x3b1451346aa1d49dd79fb13fe54e5ea4d8dca18de6b3286053e1a82954a8eeaf",
    "developer_id": "0x2DD872C6f7275DAD633d7Deb1083EDA561E9B96b",
    "name": "alperp-frequently-decrease-position-tx",
    "description": "**Purpose of the Specific Web3bot:**The bot is designed to monitor the Binance Smart Chain (BSC) and generate an alert whenever it detects that a single account has closed a significant number of positions within a configured time frame. This behavior may indicate potentially suspicious activities, such as market manipulation or exiting positions due to insider information.**From the Description:**The bot checks for the event `DecreasePosition` emitted by the Perp Trade contract. If this event is triggered multiple times within a certain time-frame for the same account, the bot fires an alert with the severity set to \"Medium\" and type set to \"Suspicious\". The alert contains metadata including the user's address account and the number of closed positions. Supported chain for this bot is Binance Smart Chain (BSC). A test scenario with the block number `32228807` on the Kovan Testnet is provided for verifying the bot's functionality.**From the Source Code:**The source code consists of several JavaScript files that include the agent's configuration, utility functions for operating on events and creating findings, network-specific mappings, and the agent logic itself. The core Js files inspected are:- `agent.spec.js`: Contains tests for the agent to ensure that the agent behaves correctly. These tests simulate various scenarios, including false positives, correct event detection, and multiple accounts closing positions.- `agent.config.js`: Holds configuration parameters, such as the ABI of the DecreasePosition event, a threshold for the number of closed positions to trigger an alert, a number of blocks to cover the configured time-frame, and the contract address of the monitored Perp Trade contract.- `utils.js`: Contains utility functions and constants required by the agent, including event parsing and finding creation methods.- `network.js`: Describes network-specific data for BSC (with network ID 56), including the threshold and blocks to watch.- `agent.js`: The main agent logic, which initializes the bot, listens to block events, readies transaction logs for the DecreasePosition event, and issues findings when criteria are met.In SUMMARY, this bot's role is to scrutinize transaction logs for the `DecreasePosition` event on a specific smart contract address in the Binance Smart Chain (BSC). When an account exceeds the configured threshold for closed positions within the defined number of blocks, the bot issues an alert for further investigation.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0xdccd708fc89917168f3a793c605e837572c01a40289c063ea93c2b74182cd15f",
    "developer_id": "0x183d13c4fCb5133EA52345A9037C9c25A5Aa139D",
    "name": "ak-forta-aztec-protocol-money-laundering",
    "description": "**Purpose of the Bot:**The bot aims to monitor transactions made to the Aztec Protocol on the Ethereum blockchain to identify potential money laundering activities. Specifically, it looks for deposit events to Aztec Protocol and assesses if an account has made numerous large transfers that could indicate money laundering, especially following a hack.**Functionality of the Bot as gleaned from the source code:**1. **Initialization (`initialize`)**: The bot sets up its configuration by loading parameters such as the threshold for deposits in ETH, addresses of Aztec protocol to watch, and the observation window duration for detecting suspicious activity.   2. **Handling Transactions (`handleTransaction`)**: When a new transaction occurs, the bot filters for deposit events to Aztec addresses. For each deposit event:   - It logs deposits made by each address within an observation window.   - If the total deposit value from an address exceeds a predefined threshold within the observation window, it creates a high-severity finding indicating potential money laundering.   - If the deposit value is below the threshold, it logs an info-level finding for the deposit event itself.3. **Memory Cleaning**: The bot periodically cleans up its memory of old transactions that fall outside of the observation window to ensure that only relevant transactions are considered in determining suspicious activity.4. **Configuration**: The bot receives specific threshold values and observation windows from an external JSON configuration file to allow for easy adjustments based on different criteria or network conditions.5. **Alerts Generation**:    - `createTokenDepositFinding`: Generates an info-level finding when funds are deposited to the Aztec Protocol.   - `createNativeTokenLaunderingFinding`: Creates a suspicious, high-severity finding if the deposited funds from a single address exceed the specified threshold within the observation window.**Source Code Analysis:**- The `agent.js` file defines the main functionality of the bot, including initialization and handling of each transaction. It imports necessary functions from different modules.- The `findings.js` file contains functions to construct the findings that the bot will produce when it detects deposit events or potential money laundering activity.- The `constants.js` file sets various constants the bot uses, such as the event ABI for the deposit event and the nominator used to convert values to Ether.- The `logger.js` file is a utility to log messages depending on the severity level, potentially for debugging purposes.- The `agent.spec.js` file appears to contain tests for the bot to validate its behavior, ensuring the bot produces the correct findings for given transactions scenarios.In summary, the bot is designed to detect potential money laundering activities on the Ethereum blockchain by monitoring large deposit transactions to the Aztec Protocol within specific observation windows. It produces alerts of varying severity based on the aggregated value of transactions from individual accounts.",
    "version": "0.0.4"
  },
  {
    "bot_id": "0xb6da16b40faaa3d1b22fe3b8efa57fda38b8d093231ab101b453610be3c63970",
    "developer_id": "0x9AFC82c53beB3d4Be0E7fc991d7A0480673414A4",
    "name": "Wallet-Monitor-Agent",
    "description": "Purpose of the Bot:The purpose of the Wallet Monitoring Agent bot is to detect and provide an alert whenever the specified wallet sends an amount of Ethereum (ETH) that is greater than or equal to 0.1 ETH.Key Features:- Monitors the Ethereum blockchain.- Triggers an alert with ID \"FORTA-1\" if the monitored wallet sends 0.1 ETH or more.- The severity and type of the alert are set as \"info,\" indicating that it is for informational purposes rather than indicating a critical issue.- It specifically monitors a single predefined Ethereum address.Source Code:The source code for the bot includes two JavaScript files: `agent.spec.js` and `agent.js`. The `agent.js` file contains the main logic for monitoring transactions, while the `agent.spec.js` file contains tests to ensure the logic functions as intended.- `agent.js` defines the `MONITORED_ADDRESS` and `sentEthThreshold` variables, setting the address to monitor and the ETH threshold (0.1 ETH), respectively. The `handleTransaction` function checks if the `from` address of a transaction is equal to the `MONITORED_ADDRESS` and if the amount of ETH sent is greater than or equal to the threshold. If both conditions are met, it generates an alert with the details of the transaction.- `agent.spec.js` provides test cases for three scenarios: when the monitored wallet is not part of the transaction, when the monitored wallet sends less than 0.1 ETH, and when the wallet sends 0.1 ETH or more. The tests ensure the `handleTransaction` function behaves as expected in these situations.In summary, this bot is designed to keep track of a specific Ethereum address and notify the user about any transactions that send 0.1 ETH or more from that address.",
    "version": "0.01"
  },
  {
    "bot_id": "0x41cbfcdc2dc81bf94c8ebb9bbb6f06eca67b50c5eb5113adce09668736ff36dd",
    "developer_id": "0x183d13c4fCb5133EA52345A9037C9c25A5Aa139D",
    "name": "Token Spam Detector / Sandbox",
    "description": "This bot detects spam tokens (ERC20, 721 and 1155) using advanced algorithms that consider token metadata analysis, compliance with declared token standards, distribution rationality and analysis of token creator and recipient behavior.The web3 bot described, known as \"Spam Detector,\" is designed to detect spam tokens within blockchain networks using advanced algorithms that analyze multiple indicators. It performs detailed analyses on new tokens by examining factors such as token metadata, compliance with declared token standards, distribution rationality, creator and recipient behavior, and more. The bot uses a modular system to evaluate tokens and emits alerts when spam tokens are identified. DropIndexData is a method used in the bot's source code to manage and clear the token and address-related data from the underlying sqlite database.The bot's source code indicates it uses a SQLite database for storing its findings and relevant data, employing a series of CRUD operations (Create, Read, Update, and Delete) on the database. It uses SQL commands to interact with tables like `addresses`, `contracts`, `transactions`, and `events` related to ERC standards like ERC-20, ERC-721, and ERC-1155. It features functionalities to initialize the database, insert new entries, retrieve existing records, and delete records as needed. A debug mode is also included to help troubleshoot specific tokens or transactions.Additionally, the bot has protections against alert floods with false positive findings by referencing a URL for known false findings and can optimize its local storage to avoid redundant or outdated information being kept. The bot operates with an understanding of redundancy - how many nodes it's running on, and adjusts its operation based on this, also syncing its configurations with the network state periodically.",
    "version": "0.0.27"
  },
  {
    "bot_id": "0x67955dd1f25ab38cc5065d62453e73f77b8de43a79ad745c5f3816906c8fe815",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Gnosis xDai-ETH Omni Bridge",
    "description": "The purpose of the described bot is to monitor the balance of a specific protocol and detect significant decreases in its token balance across various supported blockchain networks, including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. When the monitored balance is completely drained or decreases significantly, the bot triggers alerts, assigns labels to the transactions, and computes an anomaly score indicating the rarity of such an event based on historical data.There are two types of alerts:1. `BALANCE-DECREASE-ASSETS-ALL-REMOVED`: Fired when the token balance of a protocol is completely drained, indicating a critical severity and likely an exploit.2. `BALANCE-DECREASE-ASSETS-PORTION-REMOVED`: Fired when a significant portion of the token balance is removed, indicating a medium severity and likely an exploit.The bot uses labeled data to provide additional context about the suspicious transactions, such as which transactions might be suspicious, which addresses might be the victims, and which ones might be the attackers. The labels come with a confidence score between 0 and 1, indicating the level of confidence that a particular transaction or address type is associated with suspicious or damaging activity.Looking deeper into the source code provided within the triple quotes, the bot appears to implement the following functionality:- Import necessary modules and define constants, including ABI and alert keys.- Monitor transfer events related to the contract\u2019s address.- Keep track of the balance of tokens within the contract, as well as each token's historical time series data.- Upon detecting transfers, record the value being transferred and any anomaly in the context of historical data using a predictive model (ARIMA).- Generate findings with critical or medium severity based on whether the entire balance or a portion is drained.- Persist data in a backend system and use persistence helpers to manage data storage.- Provide initialization and block handling functions to set up the bot and process block events.In summary, the bot serves as an automated tool for detecting potential exploits or security incidents related to token balances decreases, which could be indicative of theft, hacking attempts, or other unauthorized fund movements within decentralized protocols.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x5d39b5919581b1159af64787d8c156721c6d22a1267323c9651bff9c767d3f89",
    "developer_id": "0x286a227Ae4f31c586E2935f1C0B0c36a0AD30340",
    "name": "umee-large-amount-of-account-involvement",
    "description": "Purpose of the Web3 Bot:This bot is designed to monitor transactions within the Ethereum blockchain and alert users when a transaction involves a large number of addresses that are specified in its configuration. The threshold for what constitutes a \"large amount\" of address involvement is configurable, and therefore this bot can be tailored to watch for varying levels of transaction activity. It supports the Ethereum chain, including tests on both the Mainnet and the Kovan Testnet.The bot will generate an information-level alert (UMEE-13) that indicates a large number of addresses were involved in a single transaction. The alert will contain metadata including the initiating address, the receiving address, and the number of addresses involved in the transaction, along with a list of any monitored addresses that participated in the transaction.Summary of the Source Code:The source code consists of three main files: `agent.spec.js`, `agent.config.js`, and `agent.js`.1. `agent.js` contains the main logic for the bot:   - `provideHandleTransaction` is a higher-order function that takes a configuration object and returns a `handleTransaction` function tailored to that configuration.   - The `handleTransaction` function examines each transaction to see if the number of involved addresses meets or exceeds the configured threshold and if any of the involved addresses are in the monitored list.   - If both conditions are met, it creates and returns a finding.2. `agent.config.js` holds the configuration object:   - It sets the `threshold` for the minimum number of accounts involved in a transaction to trigger an alert.   - It contains `monitoredAddresses`, which is an array of addresses to be monitored for involvement in transactions.   - This file can be adjusted to specify different addresses and thresholds for Mainnet and the Kovan Testnet.3. `agent.spec.js` is for testing the bot's functionality:   - A series of test cases ensure the `handleTransaction` function appropriately generates findings when the conditions of the configuration are met.   - It uses mocked transaction events and checks whether the correct alerts are generated based on varying conditions of address involvement.In summary, this bot aims to provide informational alerts for transactions that include a large and configurable number of specified addresses on the Ethereum blockchain.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x7c67654fca8537473b9cebfa779885204cad216d4403d8cd93239cd2223b7e6d",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Arbitrum DAI L1 Escrow",
    "description": "### Purpose Summary:The **Large Balance Decrease Bot** monitors specific smart contract addresses, primarily focusing on their token balances. The bot alerts users when it detects a significant decrease in the balance of a contract, potentially pointing to an exploit or unexpected large withdrawal.The bot operates across multiple chains, including Ethereum and its Layer 2 solutions (Optimism, Arbitrum), as well as other EVM-compatible chains like Binance Smart Chain, Polygon, Fantom, Avalanche, etc.It issues two types of alerts:1. **BALANCE-DECREASE-ASSETS-ALL-REMOVED**: Triggered when a contract's token balance is entirely drained, indicating a critical and high-confidence exploit scenario.   2. **BALANCE-DECREASE-ASSETS-PORTION-REMOVED**: Fired when a considerable portion of a contract\u2019s token balance decreases. It's treated as a medium-severity and medium-confidence exploit scenario.Both alert types include metadata such as transaction hashes, the impacted asset, and an anomaly score based on transaction patterns. Each alert is labeled with several categories including EntityType (Transaction, Address), with confidence levels indicating suspicion of exploitation or attack, and the victim status of the contract.The bot is configured and tested with specific contract addresses and an aggregation time period for analysis.### Source Code Summary:**`agent.spec.js`**: Contains unit tests for the bot's operation, including tests for the scenarios when no significant balance changes happen, when a new asset is transferred to the monitored address, and when various types of balance drains occur.**`persistence.helper.js` and `persistence.helper.spec.js`**: Define and test a helper for persisting data relevant to anomaly detection, either on a remote database or locally, depending on the environment configuration.**`agent.js`**: Contains the primary logic for the bot, which includes:- Initializing and loading transaction counts for exploit detection and record management.- Handling individual transactions to check and aggregate balance decreases, and issue findings if necessary.- Handling blocks to assess collected data periodically, potentially raising alerts if anomalies are detected according to a trained ARIMA model for time series forecasting.- Persisting key counters at regular block intervals to maintain state across bot runs.The bot's behavior is primarily centered on contract interaction events and state changes. It keeps track of token transfers involving the monitored contract address, updating a time series with these data points and using ARIMA for anomaly forecasting. The bot reacts to significant deviations from the forecasted activity, expecting that such deviations might indicate a potentially exploitative action.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xe3bec46574fc5210ca21607d7e895e612384707f3ab6d98cee402c822c3c3670",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Impossible Finance - Flash Loan",
    "description": "The web3 bot described is aimed at monitoring transactions on the Binance Smart Chain that involve flash loans through a specific type of swap function on pairs generated by Swap Factory V3, particularly for Impossible Finance. A flash loan is a feature in DeFi that allows a user to borrow any available amount of assets from a pool without collateral, as long as they return the borrowed amount within one block transaction.Purpose of the Bot:The bot's purpose is to detect when a flash loan is being executed through the Swap Factory V3 on the Binance Smart Chain and trigger an alert with the following properties:- Alert ID: IMPOSSIBLE-5- Severity: Info- Type: Info- Metadata includes:  - `amount0Out`: Amount of the first token sent out.  - `amount1Out`: Amount of the second token sent out.  - `to`: The receiver's address.  - `data`: Additional data argument passed to the call.The source code provides the functional implementation of this bot, which uses the Forta agent framework for detecting flash loan transactions. The code includes the following files:1. `agent.spec.js` - Contains tests to verify the bot's behavior under different scenarios.2. `utils.js` - Defines constants used within the bot, including the swap factory address and ABI definitions.3. `agent.js` - Implements the main logic for detecting flash loans by monitoring `swap` function calls and emitting alerts when the criteria for a flash loan are met.Key points from the source code:- The bot caches pairs to optimize queries and reduce network calls.- It checks whether a particular swap interaction originates from the expected Swap Factory V3 by comparing contract addresses.- Swap function calls are filtered to identify potential flash loan transactions (identified by the presence of the 'data' argument in the call).- If a potential flash loan is detected, it verifies whether the swap pair was generated by the Impossible Finance factory.- An alert is created whenever a flash loan transacting through the Impossible Finance factory is confirmed.This web3 bot essentially serves as an on-chain surveillance system to inform users or systems monitoring the blockchain about the occurrence of flash loan transactions associated with Impossible Finance, which is useful for transparency and security analysis purposes.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x8d492590bacfb768ea41f7d25f25a512935a2aee539ce3f59c3e03b8c7259d08",
    "developer_id": "0xb300244F9aA540410847273fD9c2a0fD3C81b02d",
    "name": "comb-atck",
    "description": "The specific Web3 bot described in the provided source code acts as an alert combiner for potentially malicious activity on the Ethereum blockchain. It uses Forta, a real-time detection network for monitoring blockchain activity, to identify addresses that might be involved in various stages of an attack, such as funding, preparation, execution, and money laundering.The bot consists of the following primary components:1. **findings.py**: It contains the `AlertCombinerFinding` class that handles the creation of findings/alerts. This class processes data such as the attacker's address, the time frame of suspicious activities, involved addresses, alert IDs, transaction hashes, and a watchlist of project contracts. If an address is involved with a compromised contract from the watchlist, a `Finding` is returned with metadata including the attacker address, involved addresses, dates, and related alerts.2. **constants.py**: Defines various constants used by the bot such as date lookback windows, the list of bases bots, thresholds for transactions count filtering, and configurations for enabling or disabling specific detection features like scam and attack detectors.3. **agent.py**: The main script that includes logic for handling block events, fetching associated alerts, and triggering detections via the `detect_attack` function. It fetches alert data from Forta Explorer based on certain bot IDs and alert IDs, identifies clusters of addresses (address groups associated to the same entity), and correlates across alerts from different detection bots to identify potential attack patterns.4. **forta_explorer.py**: Responsible for interacting with the Forta Explorer's GraphQL API to fetch alerts data related to certain bots, alert IDs, and within specified date ranges.The bot analyzes blockchain data to track addresses that trigger alerts from various security bots categorized by different threat stages such as preparation, exploitation, and money laundering. If an address is associated with alerts covering all necessary stages within a lookback period, the bot generates a finding to suggest that the address may be involved in an attack. The findings also integrate information about which project contracts might have been compromised and provide this data in a structured format. The source code for each file is well-documented and includes function definitions, usage of pandas DataFrames, threading for concurrent processing, and logging for debugging and information tracing.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x3d1242fb8af0cdd548e7b5e073534f298f7ddaebbafe931a3506ab0be0e67e87",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Multichain Marlin POND Bridge",
    "description": "Purpose:The Large Balance Decrease Bot is designed to monitor and detect significant decreases in the balance of a protocol's token assets. It supports multiple blockchain networks, including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche. The bot triggers alerts in two scenarios:1. When a token balance is completely drained (\"BALANCE-DECREASE-ASSETS-ALL-REMOVED\")2. When a significant portion of the token balance is removed (\"BALANCE-DECREASE-ASSETS-PORTION-REMOVED\")Alert severity is set to \"critical\" for total asset removal and \"medium\" for a significant decrease. It uses metadata to provide an anomaly score that indicates the alert's degree of deviation from typical transaction behavior. It also attaches labeled information to transactions and addresses for more context, indicating if entities are considered suspicious, a victim, or an attacker.The bot setup can be tested on various block ranges for specific contracts and aggregation time windows using provided \"npm run block\" commands.The bot relies on the ARIMA model for time series forecasting to determine if a decrease in balance is significant.Source Code Overview:The source code for the bot includes the following key components:`agent.spec.js`:Tests for the bot's behavior. The unit tests check various scenarios, including filtering out irrelevant transfer events, detecting balance drains, anomaly detection with ARIMA forecasting, and persisting state.`persistence.helper.js`:Deals with persisting the state on an external database when not running a local node. It has methods to save and load values to ensure continuity over bot restarts.`persistence.helper.spec.js`:Unit tests for the persistence helper to ensure the correct behavior of storage and retrieval of data.`agent.js`:Contains the main logic for the bot. It consists of handlers for initializing, processing transactions, and processing blocks. The handlers use ethers.js to interact with the blockchain and retrieve token balances. ARIMA forecasting is used to detect anomalies, and the PersistenceHelper class to maintain state between execution intervals.The handlers are responsible for detecting when the relevant balance decrease events occur and constructing appropriate findings based on the observed changes and the trained ARIMA model's predictions.Execution Flow:- During initialization, previous transaction counts for different kinds of alerts are loaded.- During transaction handling, it detects balance changes due to transactions, and if a token balance is fully drained, it creates a finding.- During block handling, it evaluates changes over an aggregate period, compares actual decreases to predicted values, and possibly creates findings for significant balance decreases.- The persistence helper saves counts at regular block intervals to maintain state across restarts or deployments.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0x5f798596b2c37dabfdbd66313eede4b025fadd3ae37241f6fc645f8af8e7ea1a",
    "developer_id": "0x5354012663b2e0859e89125AeA2E8317e57f48cc",
    "name": "pstake-stkbnb-admin-event-bot",
    "description": "The specific web3 bot described and implemented in the provided code is designed to monitor and alert when certain \"admin events\" are emitted by pSTAKE's stkBNB smart contracts on the BNB chain. The bot can detect various levels of severities such as \"Info,\" \"High,\" or \"Critical\" based on the event emitted. It has a structured configuration file for defining the details of the contracts and events to monitor.The bot's source code consists of several JavaScript files using Node.js that work together to create a Forta agent capable of analyzing blockchain transactions for specified events. Here's a summary of each part of the codebase provided:- `agent.spec.js`: Contains unit tests for the main agent, checking the configuration file's integrity and the logic for handling transactions.- `utils.spec.js`: Holds unit tests for utility functions, ensuring functionality like address parsing and expression parsing works correctly.- `utils.js`: This file defines utility functions used throughout the bot, including methods for interpreting and transforming event data, parsing expressions for event conditions, and validating addresses and numeric values.- `test-utils.js`: Provides testing utilities that allow for the simulation of event logs to test how the bot would handle real blockchain data.- `agent.js`: This is the core of the bot, containing the logic to initialize the agent with data from a configuration file and handle transactions by filtering and evaluating events based on the criteria set in that configuration.From the provided source code, it becomes evident that the bot is engineered to be extendable and configurable, allowing the user to specify which contracts and events to monitor without changing the underlying codebase. This feature is tested extensively in the provided test specifications, ensuring reliable and predictable behavior. Additionally, the bot\u2019s design includes error handling for various edge cases, such as missing or incorrect configuration data.The bot would typically be deployed in conjunction with the Forta network, providing decentralized monitoring and alerting for admin activities in the stkBNB smart contracts, contributing to the overall security and transparency of the associated DeFi application.",
    "version": "1.0.0"
  },
  {
    "bot_id": "0xa91a31df513afff32b9d85a2c2b7e786fdd681b3cdd8d93d6074943ba31ae400",
    "developer_id": "0xad7547d09015664943d0A7c1BeA47f28dF298EC0",
    "name": "funding-tornado-cash",
    "description": "Purpose:The purpose of the web3 bot is to monitor blockchain transactions and detect when funds are withdrawn from Tornado Cash to a new account, specifically focusing on small and high amounts. The bot operates on several blockchains: Ethereum, Binance Smart Chain (BSC), Polygon, Optimism, and Arbitrum. When a certain amount of funds is withdrawn to a new account, the bot fires alerts identified as \"FUNDING-TORNADO-CASH\" for small amounts and \"FUNDING-TORNADO-CASH-HIGH\" for high amounts, each with its own severity level and labels for the addresses involved.Source Code:The source code provided includes several Python files that combine to form the agent. The key components are:- 'FundingTornadoCashFindings': This class in 'findings.py' contains a method to generate findings alerts based on the amount of fund withdrawn (high or low) and other parameters such as the address involved and chain ID. It determines whether to raise a low-severity or info-level alert.- 'constants.py': This file holds important constants such as the addresses associated with Tornado Cash contracts, topics identifying Tornado Cash withdrawals, and mappings of these addresses across different blockchains.- 'agent_test.py': This file includes tests that ensure the agent behaves as expected under various conditions, including performance tests and checks for correct finding emissions given certain transaction events.- 'storage.py': Handles the storage of secrets using either a local file in test mode or retrieving them from a database using an API in production.- 'agent.py': The main file where the bot is implemented. It defines functionality to detect funding withdrawals from Tornado Cash and handle transaction events. It uses the findings, constants, and storage modules to construct and return appropriate findings.- 'web3_mock.py': A mock of the Web3.py library used for testing, allowing the testing module to simulate transaction counts for specified addresses.Findings alerts are generated with specific metadata and labels, offering an 'anomaly_score' to indicate the abnormal nature of a transaction relative to typical funding patterns. Alerts are tailored to the specifics of a transaction, including the amount moved and whether the account receiving the funds is new or existing.",
    "version": "0.0.14"
  },
  {
    "bot_id": "0x64b9272bb71f3ac91f9b9c5ef1fe63c92826d4a3e0e0b6ba55cdb99c050b83b2",
    "developer_id": "0x70358461af09dCb10B003e8e0a6033de34387A2a",
    "name": "OpBERT Malicious Contract Detector",
    "description": "### Purpose:The Malicious Contract Detector bot uses machine learning to identify potentially harmful smart contracts on the blockchain. It employs a machine learning model\u2014specifically a BERT transformer model\u2014to classify new smart contracts as either safe or potentially malicious. The project is separated into two phases:1. Research Phase:   - Evaluates different algorithms and features such as function signature hashes, abstract syntax trees, opcodes, and approximated source code to optimize the model's ability to recognize dangerous contracts.2. Development Phase:   - Focuses on creating the bot and optimizing the process of converting smart contract code into a suitable feature set for the model to analyze.    - Aims to process a high volume of incoming contracts in real-time with accuracy and precision.The bot is in the alpha testing stage, demonstrating promising initial results in identifying malicious contracts.### Source Code:The provided source code defines a Python script that likely runs as a Forta agent to detect and report on the creation of potentially malicious smart contracts in real-time. The source code comprises several components:- `findings.py`: Contains the `MaliciousContractFindings` class with a method to produce a Finding (an alert) when a potentially malicious contract is detected.- `config.py`: No code provided. Presumably, this would hold configuration settings.- `logger.py`: Sets up custom logging for the application with specified formatting.- `agent.py`: The core of the bot that handles the analysis:  - Initializes machine learning model and tokenizer.  - Defines functions for detecting malicious smart contracts, which involves bytecode disassembly, feature extraction using the tokenizer, and prediction using the loaded model.  - Produces alerts for potentially malicious contracts based on the model's predictions.  - Includes a helper function `calc_contract_address` to determine the address for created contracts.  - Orchestrates the handling of blockchain transactions and calls the detection routines.The machine learning model used is a pretrained `DistilBertForSequenceClassification` model with custom weights (`opcodes_model_weights_v5.pth`). The tokenizer `DistilBertTokenizerFast` is also from the BERT family of transformer models. The agent receives a transaction event as input and outputs findings which, if malicious activity is detected, contain information about the suspicious contract creation incident.It's important to note that some sections of the source code are commented out or have placeholders (e.g., `config.py` content), indicating the script may still be in development or require customization before deployment.",
    "version": "0.2.0"
  },
  {
    "bot_id": "0x16d30698283b688f7266b2fcd9d6c5edc8e0551a212edcd2d010e54a8ffcf0ba",
    "developer_id": "0x40e98Fe8BCc8c0fF48A585bc6f28d504fF17A927",
    "name": "Forta Staking Parameters",
    "description": "The purpose of the specific web3 bot described in the given text and source code is to detect and alert on specific on-chain events related to staking parameters within the Forta network on the Polygon blockchain. The bot monitors for two types of events: \"FortaStakingChanged\" and \"StakeSubjectHandlerChanged\".**Purpose from Description:**- The bot detects when `FortaStakingChanged` and `StakeSubjectHandlerChanged` events are emitted from transactions on the Polygon blockchain.- For `FortaStakingChanged` events, alerts with low severity and type info are generated. These alerts include metadata with the new FortaStaking contract address.- For `StakeSubjectHandlerChanged` events, similar low-severity info-type alerts are created, but the metadata will contain the old and new stake subject handler addresses.**Purpose from Source Code:**- The bot is implemented in JavaScript with the Forta agent framework, as seen in the provided `agent.js` and `agent.spec.js` files.- The `handleTransaction` function in `agent.js` processes the transaction events and uses `filterLog` to extract the specific events of interest based on a provided ABI (Application Binary Interface) and a contract address.- When a `FortaStakingChanged` event is detected, the bot creates a finding with low severity, of the type info, and includes the new `staking` address and the address of the `from` field in the transaction in the metadata.- When a `StakeSubjectHandlerChanged` event is detected, the bot creates a similar finding with metadata containing the old handler, the new handler, and the address of the `from` field in the transaction.**Testing the Bot:**- The `agent.spec.js` appears to contain unit tests for the `handleTransaction` function, ensuring that the bot behaves correctly for each event type and produces the expected findings.In conclusion, this web3 bot functions as a monitoring tool on the Polygon blockchain for changes in Forta's staking parameters, alerting users of new staking contract addresses and changes to stake subject handlers with low-severity informational alerts. The source code indicates the bot processes transaction events, extracts event data, and produces structured findings for each relevant event it detects.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x7edb16e51ca0e6a211a655356ec863ae7445104553a20349873ce9145d3c6eb0",
    "developer_id": "0x2C4536B866782d2A3D0B75d66852955a8e8beB35",
    "name": "admin-changes",
    "description": "The bot described and implemented in the provided source code is a web3 bot designed to monitor administrative changes in the TrueFi protocol, specifically within TrueFi pools. It is built to work on the Ethereum blockchain.Purpose of the specific web3 bot:- The bot listens for specific administrative events that are emitted by the TrueFi pools smart contracts. These events include but are not limited to changing joining fees, changing the beneficiary, oracle updates, pausing/unpausing the contract, SAFU contract changes, changes in credit agencies, and ownership transfers.- Whenever such an event is emitted, the bot generates an alert with high severity, which indicates the importance of the administrative change within the pool's governance.- The bot's alerts are meant to inform users or system administrators of potentially significant governance actions that could impact the pool's operations.Key elements of the source code:- The `agent.spec.js` file contains unit tests to verify that the bot behaves correctly. It mocks transaction events and checks if the bot returns the expected findings when admin events are or are not emitted.- The `helper.js` file contains utility functions and definitions including a list of admin events to watch for, a function to retrieve pool names from smart contract addresses, and a standardized way of creating alerts.- The `agent.js` file defines the core logic of the bot, including initializing the pool information, handling blockchain transactions, filtering for the admin events associated with the pool addresses, and generating findings based on those events.By analyzing incoming transactions for the predefined admin events, the bot creates a detailed alert for each event, including the event's name, the associated pool's name, and the event's arguments, thus serving as a monitoring tool to highlight key administrative actions in the TrueFi protocol to its users.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x54fbc115dbfc297d211230688765a41632699aab9d12179f000252b13e7a6b82",
    "developer_id": "0xE34dC9DB5F87f1854F687D94FF37db6993ef1441",
    "name": "iron-bank-drastic-price-change",
    "description": "Purpose of the Web3 Bot:The purpose of the Web3 bot as described is to monitor and detect drastic price changes for the underlying asset of an Iron Bank market on the Ethereum blockchain. If the price changes by more than 30% within a 1-hour period, an alert with the ID \"IRON-BANK-DRASTIC-PRICE-CHANGE\" is fired.The bot sets the severity of the alert to \"medium\" and the alert type to \"info.\" The alert also includes metadata, which specifies the Iron Bank market and the percentage difference in prices.Source Code Overview:The source code of the bot consists of multiple JavaScript modules that interact with the Ethereum blockchain using the `forta-agent` library. The code includes functionalities such as:- `multicall.js`: A utility module to perform multiple contract calls in a single request to optimize the number of RPC requests to the Ethereum node. It is essential for aggregating contract call results in a gas-efficient manner.- `blockchain.js`: Configuration module for different blockchain networks and their specific Iron Bank market addresses, multicall addresses, and other relevant information.- `helper.js`: Contains utility functions that use the blockchain configuration to interact with Iron Bank markets, such as getting all market addresses, market details, and the Oracle contract address on the network.- `agent.js`: The primary module that integrates with the Forta agent framework. Defines the `initialize` and `handleBlock` functions. The agent checks the underlying asset prices of markets every 10 blocks and reports drastic price changes through the Forta alert system.- `comptroller.js`, `multicall.js`, `index.js`, `oracle.js`, `itoken.js`, and `underlying.js`: Define the ABI (Application Binary Interface) of the Iron Bank contracts, the multicall contract, and other related contracts, allowing the bot to interact with contract functions effectively.The `initialize` function sets up the agent, and `handleBlock` is the core function that analyzes blocks to detect price changes and create findings. The bot uses a multi-caller pattern to fetch prices and then processes the change in prices over time to check if they exceed the 30% threshold within the hour interval.To summarize, this Web3 bot is designed to track price changes in Iron Bank market assets and create an `info`-level alert when it detects a drastic change in the underlying asset\u2019s price. Its implementation takes advantage of utilities for batched contract calls to monitor multiple markets efficiently.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x5daf7406bd9f8d80bcdebb84d2c6588f6f43838c69abbc06b3352dbc7f1879f6",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Impossible Finance - Dangerous Activities",
    "description": "The purpose of the described web3 bot is to monitor blockchain activity for interactions that involve addresses from Impossible Finance\u2014a decentralized finance platform\u2014and addresses from a known list of dangerous addresses. It operates specifically on the Binance Smart Chain. When the bot detects a transaction that includes both an Impossible Finance address and a known dangerous address, it triggers an alert:- Alert ID: **IMPOSSIBLE-8**- Severity: **High**- Type: **Suspicious**- Metadata:  - `impossibleAddresses`: A list of Impossible Finance addresses involved in the transaction  - `dangerousAddresses`: A list of dangerous addresses involved in the transactionThe source code for the bot includes JavaScript files that utilize the Forta Agent SDK, which is a framework for detecting and preventing malicious behavior on blockchains. The `agent.js` file includes the main logic for handling and creating findings for transactions that meet the criteria. It relies on utilities from `utils.js` and verifier logic from `darklist.verifier.js`.The `darklist.verifier.js` fetches a list of darklisted (dangerous) addresses published by MyEtherWallet and determines if a given address is part of this darklist. The threshold for updating this list is set to one day, as indicated by the `UPDATE_THRESHOLD` constant.The `impossible.addresses.js` file contains a hard-coded array of addresses relating to Impossible Finance.The source code also contains test cases for the aforementioned logic, ensuring it functions correctly under various scenarios.In summary, the bot's goal is to raise high-severity alerts for suspicious transactions involving conjunctions of Impossible Finance addresses with externally identified dangerous addresses to potentially prevent harmful activities or bring attention to them.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x55636f5577694c83b84b0687eb77863850c50bd9f6072686c8463a0cbc5566e0",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Flashloan Detection Bot",
    "description": "This bot focuses on detecting instances of flashloan utilization, the bot diligently examines each transaction to determine if it aligns with the characteristics of a flashloan. It further analyzes the transaction to assess whether the borrower has generated a substantial profit, using a preset percentage threshold. The bot's function is activated solely in cases where both a flashloan is involved and the borrower's profit meets the specified criteria, providing an objective mechanism for identifying these specific transaction types.The purpose of the Flashloan Detection Bot is to:1. Detect transactions across multiple supported blockchains (Ethereum, Optimism, BSC, Polygon, etc.) that contain flashloans.2. Determine if the borrower has made a significant profit, defined as a profit threshold of 2% of the borrowed amount.3. Fire alerts with different severity levels depending on how significant the profit is:   a. A low severity alert (`FLASHLOAN-ATTACK`) if the profit is significant but does not exceed a very high threshold.   b. A high severity alert (`FLASHLOAN-ATTACK-WITH-HIGH-PROFIT`) if the profit is exceedingly high, or if the profit margin is very large compared to the amount borrowed.4. Provide labels and metadata including the borrower's address (assumed attacker), profit amount, involved tokens, and an anomaly score.The bot comprises various JavaScript files for its operation. Here's a brief overview of some of the significant ones:- `agent.js`: The main agent file that uses detected events to create findings about flashloan attacks.- `flashloan-detector.js`: A library that aggregates data from multiple protocol flashloan events.- `persistence.helper.js`: A helper to load and persist data to maintain state across multiple executions.- `helper.js`: Contains functions for calculating profits in USD, determining token prices, etc.- `{protocol}-detector.js`: These files (one for each supported protocol like Aave, Euler, etc.) contain logic for parsing flashloan events specific to those protocols.The source code makes extensive use of the Forta bot framework, ethers.js library, and JavaScript async/await patterns for blockchain interactions and flashloan detection. The bot maintains a state with persistent storage to track detected flashloans and uses event logs, transaction traces, and smart contract interactions to identify profitable flashloan transactions.",
    "version": "0.1.6"
  },
  {
    "bot_id": "0x7992c56564a94597eb3f952e0a603af471935c61d912f8ebf88f95f722df2df2",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Stargate ETH Bridge",
    "description": "The purpose of the \"Large Balance Decrease Bot\" is to monitor and detect significant decreases in the balance of a specific protocol across several supported blockchains, including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, Avalanche. It issues critical alerts when the balance of an asset is completely drained and medium alerts when a significant portion of the balance is removed.The bot has two main types of alerts:1. BALANCE-DECREASE-ASSETS-ALL-REMOVED - Critical severity alert fired when a protocol's token balance is completely drained. It considers this as an exploit and includes metadata such as the transaction hashes, the drained asset, and an anomaly score reflecting the nature of the alert.2. BALANCE-DECREASE-ASSETS-PORTION-REMOVED - Medium severity alert fired when a significant portion of a protocol's balance decreases. It also classifies this as an exploit and includes similar metadata with the addition of the volume decrease percentage.Labels are applied to transactions to denote them as suspicious and to addresses to label them as either a victim or an attacker with a high level of confidence.The bot's behavior in a live environment would be checked by running it against some transactions (as indicated in the \"Test Data\" section using the `npm run block` command) after setting the appropriate contract address and aggregation time spread.The provided source code files show the bot's implementation logic. Here is a brief outline of what each file does:- `agent.spec.js`: This file contains the unit tests for the bot's transaction and block handling functionality. Testing scenarios cover different cases like handling transactions with no transfers, updating balance on new asset transfers, and responding to drained balance scenarios.- `persistence.helper.js`: This module provides the persistence functionality needed for the bot, allowing it to persist and load values, handling both a local filesystem-based approach or a database-centric tactic via HTTP requests.- `persistence.helper.spec.js`: This includes the unit tests for the `PersistenceHelper` class, it tests the persistence operations against both a local environment and a mocked database server.- `agent.js`: This is the primary agent module for the bot. It includes the logic for initializing the bot, handling transactions, handling block events, addressing persistence, computation of anomaly scores, and formatting of findings. Significant data structures and libraries are used for managing the state, interacting with the blockchain, and predicting abnormal balance changes.Overall, the bot's source code is structured to rigorously and dynamically monitor the balance of protocols and to issue well-structured alerts and labels upon detecting significant balance changes, likely indicative of malicious activity or exploits.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x0a5aa85c53ed623cf5dade8c82068f690f9bf6a009a3b20f340fd54ea831838d",
    "developer_id": "0xE34dC9DB5F87f1854F687D94FF37db6993ef1441",
    "name": "iron-bank-mint-or-borrow-with-flashloan",
    "description": "The specific Web3 bot is designed to monitor and alert when a mint or borrow action is happening within the same transaction as a flash loan on the Ethereum blockchain. The purpose of this bot is to detect possibly risky or suspicious activities because flash loans are sometimes exploited in attacks on DeFi platforms.To achieve this, the bot employs a complex array of JavaScript files that interact with Ethereum smart contracts:- `multicall.js`: contains logic to group multiple smart contract calls into a single request to save on network requests. It uses the Multicall contract to execute these aggregated calls.- `blockchain.js`: holds configurations for different blockchain networks, like the Iron Bank protocol addresses, multicall contract addresses, etc., for Ethereum, Fantom, Avalanche, and Optimism networks.- `helper.js`: comprises functions to get addresses for the Iron Bank's comptroller smart contract and fetch details for all markets it manages like market symbols, underlying assets, and their decimals values using the multicall logic.- `agent.js`: is the central file that orchestrates the bot's primary response to transactions, looking for specific events that signify minting, borrowing, or flash loan activities. It checks if these activities are associated with the Iron Bank markets and generates findings (alerts) accordingly.- `comptroller.js`, `itoken.js`, `underlying.js`, and `oracle.js` provide the ABI configuration for various smart contracts such as the Comptroller, Iron Bank iTokens, underlying asset tokens, and oracle for fetching price reference data.The `agent.js` file is critical as it defines:- constants for event signatures related to minting, borrowing, and flash loans.- addresses for known protocols that provide flash loans, like Aave and dYdX.- the logic to process each transaction event, identify relevant interactions, and generate alerts if conditions are met. The bot is configured to provide a medium severity `info` type alert tagged as `IRON-BANK-MARKET-INTERACTION-AND-FLASHLOAN` whenever it detects a mint or borrow in the same transaction as a flash loan. This alert includes the transaction hash and potentially the addresses of the markets involved. The bot also refreshes its data hourly.The provided bot's source code is comprehensive and uses the capabilities of the Forta agent framework, which is a monitoring network of bots for detecting anomalous activity on blockchains.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xb6bdedbae67cc82e60aad02a8ffab3ccbefeaa876ca7e4f291c07c798a95e339",
    "developer_id": "0xF56df8FEbc5dB60433516539F50231FF7242AC87",
    "name": "Compound Large Borrows Governance Monitor Bot",
    "description": "Purpose of the Bot:The \"Compound Large Borrows Governance Bot\" is designed to monitor borrow events related to the Compound Finance COMP token. Its main function is to detect if a borrower's address has accumulated an amount of COMP that reaches or surpasses certain governance thresholds. The bot's purpose is to serve as an early-warning mechanism for potential governance attacks where an entity might accumulate enough voting power to influence the protocol's decisions.Functionality Summarized from the Source Code:1. When initialized, the bot gathers the necessary data to monitor the governance thresholds for proposals and voting quorums using the Governor Bravo contract and the COMP token contract.2. It listens for \"Borrow\" events from the cCOMP token contract.3. Once a \"Borrow\" event is detected, it checks the borrower's current COMP balance against pre-defined thresholds for proposals and voting quorums.4. If the borrower's COMP balance exceeds any of the thresholds, the bot generates an alert noting that a governance threshold has been surpassed.Alerts:- The bot creates two types of alerts for two governance levels ('proposal' and 'votingQuorum'):  - AE-COMP-GOVERNANCE-THRESHOLD with medium severity for the proposal threshold.  - AE-COMP-GOVERNANCE-THRESHOLD with high severity for the voting quorum threshold.Metadata included in alerts:- Borrower's address.- The governance threshold level surpassed ('proposal' or 'votingQuorum').- The minimum amount of COMP required to cross the respective governance threshold.- The current amount of COMP owned by the borrower.Testing:- The bot contains unit tests to ensure its functionality, including checking borrowing events and generated findings.Configuration:- The bot utilizes a configuration file ('bot-config.json') for protocol information, token addresses, and threshold levels (metadata for alerts is derived from this config).Implementation Details:- The bot uses the 'forta-agent' SDK for interacting with the blockchain data.- BigNumbers are used to handle large numeric values accurately.- Alerts are generated using standardized \"Finding\" objects.Overall, the bot aims to help monitor and alert stakeholders of significant borrow events that could potentially lead to governance-related risks within the Compound Finance ecosystem.",
    "version": "0.0.3"
  },
  {
    "bot_id": "0xde47938eddcd62ed99cc4c7ba5375f9f9c2db0239114c0122cbff08934a2173d",
    "developer_id": "0x286a227Ae4f31c586E2935f1C0B0c36a0AD30340",
    "name": "umee-bad-debt",
    "description": "The \"Detect Bad Debt Bot\" is a Web3 bot designed to identify an undesirable financial state within a lending protocol where a user's borrowed amount becomes greater than the collateral they provided. This situation typically arises after the user has engaged with the market through various interactions such as deposits, withdrawals, swaps, flash loans, or borrowing.The bot monitors transactions on the Ethereum blockchain and emits high-severity alerts when it detects that after a user interacts with the Umee market, the collateral they have in ETH is less than the borrowed amount in ETH. The alert contains metadata providing the collateral and borrowed amounts involved, labeled with the alert ID \"UMEE-11.\"The bot can be configured via the `src/agent.config.ts` file and tested on the Kovan testnet with provided contracts. The source code contains several JavaScript modules that together define the bot's functionality:1. `constants.js` holds the ABIs (Application Binary Interfaces) for events related to market interactions and a function to get user account data.2. `agent.spec.js` seems to be a Jest test suite that provides automated tests for the behavior of the bot concerning different market interactions. The tests are designed to check both cases where findings should be emitted (when collateral is less than borrowed amount) and cases where no findings are expected.3. `agent.config.js` provides a default configuration, specifically the lending pool address to monitor. This can be altered to point to a testnet address for testing purposes.4. `utils.js` defines utility functions for interacting with contracts such as `getUserAccountData` which retrieves a user's financial state (collateral and debt levels), `createFinding` which formats the alert findings, and interfaces initialized with the provided ABIs.5. `agent.js` is the main script that exports `handleTransaction()` function provided by `provideHandleTransaction()`, which uses the utility functions and events filtered from the transaction logs to analyze possible bad debt situations and create corresponding findings.In summary, the purpose of the \"Detect Bad Debt Bot\" is to act as a guard against the risky financial position of bad debt in lending protocols on the Ethereum network by alerting when the collateral falls short against the borrowed amount post-market interactions. This is a security measure primarily to flag potentially risky situations that could lead to liquidations if the collateral value continues to fall or the debt value continues to rise.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x331b7e5bf098721ef2cb1fece42237656b1b649bdb6ac201d6e99ca069b2437e",
    "developer_id": "0x0B3128d4157d9D755cEeD260f1c361566ce7604F",
    "name": "Maker-Strategy-Agent",
    "description": "The purpose of this Web3 bot is to monitor Vesper Maker strategies for certain conditions that could indicate potential risks or issues with the strategy. The bot operates on the Ethereum blockchain and raises alerts based on specific criteria related to the MakerDAO lending protocol.The bot functions as follows:1. It fetches all active pools and their strategies, then filters out strategies that are specifically associated with Maker by checking if the strategy's name includes the term \"Maker.\"2. The bot then checks multiple cases to determine if an alert should be thrown, which include:   - `isUnderWater` detection: If a Maker strategy's `isUnderWater` function returns true, indicating that the strategy's debt value is greater than the collateral value, a high-severity alert is triggered.   - Collateral ratio checks: If the collateral ratio goes below a certain threshold (`lowWater`), a critical alert is thrown. Conversely, if the collateral ratio is above a higher threshold (`highWater`), an informational alert is issued.   - Stability Fee Updates: If there is a change in the stability fee in the collateral of Maker strategies, a high-severity informational alert is raised.3. Alerts generated by the bot will include metadata about the Maker strategy in question, such as the strategy's address, collateral ratio, and associated thresholds (`lowWater` and `highWater`), or the collateral type if it's a stability fee update alert.The source code provided consists of several JavaScript files which detail the implementation of the agent:- `maker.fetcher.js` implements a fetcher class responsible for querying the blockchain for active pools and strategies, especially those related to Maker.- `agent.spec.js` contains the unit tests for the bot's functionality, ensuring that it behaves correctly in various scenarios.- `utils.js` provides utility functions that facilitate the bot's operations, such as fetching collateral ratios, low/high watermarks, checking if a strategy is underwater, and creating findings based on specific conditions.- `abi.js` declares the Application Binary Interface (ABI) for the Ethereum smart contracts that the bot interacts with. This allows the bot to understand how to communicate with the smart contracts.- `agent.js` contains the main logic of the bot. It dispatches handlers to process both block events and transaction events, using heuristics based on the bot's specifications.- `mock.js` seems to be a file that aids in testing the bot by mocking blockchain data and contract calls, providing predictable responses for the tests without the need to interact with the actual blockchain.The bot's source code reveals that it heavily utilizes Promises and async/await patterns to manage asynchronous calls to the Ethereum blockchain. Additionally, it employs the `forta-agent` and `forta-agent-tools` libraries to define findings and handle blockchain events within the Forta network, which is a monitoring and surveillance framework for detecting anomalous activities on blockchains.",
    "version": "0.01"
  },
  {
    "bot_id": "0x60cfaeedd7561f2f2cb6f4a508be32598b877c715646c3f175b6a3eac46f94e9",
    "developer_id": "0x81813Bd41459c0Bb757308C855c0521A4e308E36",
    "name": "forta-agent-polygon-stader-maticx",
    "description": "The purpose of the specific web3 bot is to monitor a smart contract on the Ethereum network, particularly the `maticX` contract. The bot detects anomalies in the smart contract's behaviors, such as large swaps or staking events.The bot is designed to produce high-severity alerts whenever a large amount of `maticX` (over 50k) is unstaked using the instant pool. These alerts are informational and intended to draw attention to potentially suspicious activity.In the source code provided, there are several JavaScript files that define the constants and handlers for various types of transactions and block events that the bot monitors. The bot uses the Forta Agent framework to scan the Ethereum blockchain for specific events emitted by the `maticX` contract.Some of the activities it monitors include:1. Large bridge transfers where a significant amount of `maticX` is approved for spending by another address.2. Migration of delegations from one validator to another in the `maticX` staking process.3. Large undelegations where a substantial amount of `maticX` is unstaked.4. Any changes to the state root contract address managed by the `maticX` contract.5. Exchange rate drops in the `maticX` token.6. Low balance in the bot wallet which could affect its ability to operate.7. Drastic changes in the total supply of `maticX`.8. Role changes within the contract which could signify changes in contract management or ownership.Testing files are included to verify the bot's correctness for detecting large delegations and migrations.Overall, the bot is a comprehensive monitoring tool to ensure the integrity and security of transactions involving `maticX` tokens on the Ethereum network.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xa8dfec4641f94e2682aacec00bf2b136053d1298f3aa9324213b01f48b3a013c",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Large Balance Decrease - Hop Protocol USDC Bridge",
    "description": "The purpose of the \"Large Balance Decrease Bot\" is to monitor and detect significant decreases in the token balance of a given protocol. It supports multiple blockchain networks, including Ethereum, Optimism, Binance Smart Chain, Polygon, Fantom, Arbitrum, and Avalanche.The bot examines two types of balance decreases:1. `BALANCE-DECREASE-ASSETS-ALL-REMOVED` - Triggers a critical severity alert when a protocol's token balance is completely drained, indicating a possible exploit.2. `BALANCE-DECREASE-ASSETS-PORTION-REMOVED` - Triggers a medium severity alert when there is a significant but not complete decrease in a protocol's token balance, which could also suggest potential exploitation.The bot uses anomaly scoring to assess the abnormality of a balance decrease event based on how many such events have occurred in comparison to the total number of token transfer transactions.Metadata and labels are added for each alert, providing additional context such as transaction hashes, impacted assets, and confidence scores for suspicious activities (e.g., entity being an attacker or victim).The bot includes a setup section where test data can be used to verify its behavior, and a source code to implement its functionality. In the source code, the bot is built with JavaScript using the Forta agent framework for monitoring blockchain transactions, and it has a persistence layer to store and retrieve values from a database using an external API or local files for state management.Overall, the bot is intended to provide real-time surveillance of protocols against potential exploits by tracking asset balance changes and reporting suspicious activities that involve considerable asset depletion.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x18b605976b13d8c050f252097e99b0c505145472769df64f716f730dd0610e2d",
    "developer_id": "0xe90BCAEE86D8aF5C120f9E99cd0050Ba63a42494",
    "name": "perp88-5-detect-front-run",
    "description": "Purpose:The purpose of the \"Frontrun\" web3 bot is to detect and alert when a swap transaction on the PERP88 protocol has been subject to a sandwich attack, a type of frontrunning. It operates on the Polygon blockchain and notifies users when their transaction has been potentially victimized, marking the severity as \"Suspicious\" and the type as \"Medium\".The bot generates an alert (PERP88-05) with detailed metadata such as the transaction hashes of the front and back sandwich transactions, victim transaction, the victim's address, the tokens traded, and the amounts, as well as the frontrunner's address and profit gained from the attack.Source Code Insights:The source code consists of multiple JavaScript files structured to define the bot's behavior using the Forta Agent framework.1. `agent.spec.js`: Contains the tests for the agent's functionality, ensuring it correctly identifies sandwich attacks and generates findings when necessary. It also defines mock transactions and swap events for different scenarios.2. `agent.config.js`: Holds the configuration for the bot, specifically the address of the pool router and swap event signature, as well as a constant for the size of stored call history to check for potential frontrunning attacks.3. `utils.js`: Exports the data and constants defined in the `agent.config.js` file for use throughout the bot's logic.4. `agent.js`: This is the main file with the bot's logic. It contains the setup for network data retrieval and a history manager to track recent swaps. The key function `provideHandleTx` analyzes transactions to detect the pattern indicative of a sandwich attack by matching swap events and using lexicographic order and timestamps to find frontrunning incidents. When a sandwich attack is detected, it populates a finding which is then reported by Forta.From the description and source code, the bot works by observing swap events in real-time, maintaining a history of relevant transactions, and generating alerts when the defined patterns of a sandwich attack are detected. It utilizes Forta's agent tools and employs a smart heuristic for tracking possible frontruns within a certain history size to optimize performance and accuracy.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0xf85e8d80afed8c3f92ac3f78116fdf0101224389578acf3c7ba180822f34e8a0",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Victim & Loss Identifier",
    "description": "The bot's functionality revolves around monitoring alerts from the Scam Detector Feed bot. When it receives an alert, the bot extracts information related to the scammer's addresses and threat category. Subsequently, it provides answers to questions about who the victims of the scammer are and what digital assets have been transferred from these victims to the scammer.The provided code is quite extensive, so I'll focus on summarizing the primary purpose and functionality based on the description and source code provided. This bot, named \"Victim & Loss Identifier Bot,\" primarily interacts with the Ethereum blockchain to identify victims of scams in end-user attacks, specifically relating to fraudulent NFT orders. The bot monitors alerts from another bot called the \"Scam Detector Feed\" and reacts to these alerts by tracking scammer addresses and categorizing the types of threats they represent.When the bot identifies a scammer involved in a fraudulent NFT order, it delves into historical data for the past 90 days to see the digital assets that have been transferred to the scammer. It quantifies these assets in USD based on available price data. This process of assessing victims and losses continues daily, for 30 days after the last known activity from the scammer.The bot supports the Ethereum chain and maps alerts from the underlying Scam Detector Feed into victim loss information. It fires an \"info\" type alert containing the identified victim address, the scammer address, amounts lost, transaction hash, and details about the lost ERC-721 tokens. Additionally, it provides false positive alerts when it believes previously detected scammers are likely benign.The source code for the bot is split into different components:- **constants.js**: Defines various constants used throughout the bot's code.- **agent.js**: The main agent file that contains `initialize`, `handleAlert`, and `handleBlock` functions. These handle the bot's initialization, alert processing, and block processing, respectively.- **fetcher.js**: Handles data fetching tasks, such as retrieving transaction receipts, ERC20 prices, NFT floor prices, and others.- **fraud.nft.order.processing.js**: Contains the logic for processing fraudulent NFT orders and updating the state based on these processes.- **storage.js**: Manages persistent storage for the bot, including loading and persisting data to the database.- **findings.js**: Generates the findings that the bot will create based on its analysis, such as identifying victims and calculating associated losses.- **utils.js**: A collection of utility functions to support the bot's operations, such as cleaning objects and checking for false positives.The bot relies on external APIs and secret keys for fetching data and interacts with Ethereum smart contract event logs to analyze transactions related to the scams.Note: The source code is detailed, and this is a high-level summary. The bot's actual functionality could include more detailed analysis or features not directly observable from the given segments of code.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0x358eb0efef6e373f29144cec41881f135e0f30dbc15992b7e7a3abe49cd9e387",
    "developer_id": "0x2ED2A1d9a6A08dd106ee0F313Ef0cC52cCbf0D1A",
    "name": "forta-phishing-detect",
    "description": "The bot in question is a \"Phishing Detect Agent\" designed to identify phishing activities within Ethereum-based blockchain networks by observing transactions on the chain. Here's a summary of its main functionality based on the provided description:1. **Detection Strategy:**    - It analyzes large-scale token transfers to a single address, likely an attacker's wallet.    - It checks for high drain rates, where substantial portions of victims' balances are transferred to the attacker.    - Seeks patterns of token variety reduction before transfers by the attacker, suggesting attempts to consolidate funds.    - It excludes known exchange wallets from checks.    - Money laundering behavior is detected when the attacker uses mixers or employs a strategy to obscure token movements.    - It filters accounts with non-zero transaction history, assuming they are less likely to be victims of phishing.2. **Support and Configurability:**    - Works across all chains supported by Forta, a decentralized monitoring network.    - Offers extensive configuration parameters for fine-tuning detection, such as thresholds for token transfer numbers, drain rates, etc.    - It can analyze native token (ETH) transfers, ERC-20 token transfers, and ERC-721 token transfers.    - Does not require external APIs and has an optimized RPC call structure.3. **Alerts:**    - Fires different types of alerts based on suspicious activity, with varying severities. It has specific alerts for potential phishing including one for confirmed phishing that involves token consolidation and interaction with known laundering protocols.4. **Source Code Overview:**    - From the source code, the bot's logic consists of various handler functions for different types of token transfers and potential phishing behaviors.    - The agent uses LRUCache for caching and maintaining memory efficiency.    - It relies on a series of handlers from Forta's `forta-agent-tools` library to detect specific transfer types, as well as custom logic to determine suspicious behavior.    - It also includes a `blacklistedAddressesHandler` to monitor and flag any transactions involving previously identified suspicious addresses.In terms of the source code, `agent.js` is the main file that contains the agent's logic for handling transactions. It uses various handlers to process different types of token transfers and generate findings based on predefined patterns that suggest phishing activity. The code is organized to check various thresholds and filters to minimize false positives while effectively identifying potential attacks.The `labels.js` file is used to provide data on identified addresses, and `agent.spec.js` contains test cases for validating the agent\u2019s behavior against known phishing incidents from the real world. Overall, the purpose of this bot is to serve as an automated security agent that scans the blockchain for signs of phishing attacks, providing warnings and insights based on transactional behavior that deviates from the norm.",
    "version": "0.1.3"
  },
  {
    "bot_id": "0x5784d3436d4a3482798f45a273134a6acd2aa115500bac5a0c0cd14fba306746",
    "developer_id": "0xf3F61e51212cF504A8c7926B4A0D398ed2aB1712",
    "name": "Mercado Coin Function Calls",
    "description": "Based on the description and the provided source code, the specific web3 bot seems to be a monitoring agent designed to detect and alert on various conditions within Ethereum smart contracts and transactions as part of a security or operational maintenance setup. The bot's functionality is implemented using JavaScript and relies on the Forta SDK, a toolset for building decentralized monitoring agents.The purpose of this bot appears to be multi-faceted, as it is composed of several modules each targeting different monitoring aspects:- Alert on specific events in contracts (like governance proposals being created or canceled).- Watch transactions for interactions with specified addresses (like Tornado Cash).- Monitor variables within contracts for threshold breaches.- Monitor for specific function calls in contracts (with or without certain conditions being met).- Validate configuration files, ensuring they are correctly formatted and contain all necessary information.- Alert on numeric thresholds in variables or event values.- Provide utilities for parsing, expression evaluation, and Ethereum-specific tasks like address handling and ABI interaction.The bot's source code includes different files for utility functions, configuration validation, ABI handling, event monitoring, and handling block and transaction events. It seems there are test specifications corresponding to the bot's functionality to ensure correct behavior.In summary, the web3 bot's purpose is to monitor smart contract events, function calls, variable states, and overall blockchain activity; providing alerts in the case of anomalies, threshold breaches, or other defined conditions that require attention.",
    "version": "0.1"
  },
  {
    "bot_id": "0xb85f0dd6f4f5375dee4c353c10c62cce3e0258f1fc0324a74a8367d261ae5666",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "PancakeSwap - Pair Created",
    "description": "The purpose of the specific web3 bot being described is to detect and alert whenever a new tradable pair is created on PancakeSwap, a decentralized exchange (DEX) on the Binance Smart Chain (BSC). The bot's functionality is detailed as follows:- The bot monitors the PancakeSwap decentralized exchange, specifically its PancakeFactory contract.- It listens for events indicating the creation of a new tradable pair (token pair).- When it detects such an event, it generates an alert (CAKE-1) with a severity and type both set to \"Info\".- The alert contains metadata with the addresses of the two tokens that make up the pair as well as the address of the newly created pair itself.The source code for the bot is written in JavaScript using the Node.js runtime, and appears to use the Forta Agent SDK, a toolkit for building decentralized network agents.The bot's critical constants and configuration are defined in `constants.js`, which provides the specifics of the PancakeSwap Factory contract as well as the CREATE_PAIR_FUNCTION signature.The `agent.js` file exports the `handleTransaction` function and uses a `provideHandleTransaction()` function to create a handler that processes transactions. The handler filters log events that invoke the createPair function on the specified PancakeSwap Factory and, for each valid event, generates a finding using the helper function defined in `finding.js`.The `finding.js` module contains the `createFinding()` function that is used to construct an alert/finding object based on the tokens involved in the created pair transaction.The `utils.js` module includes the `createPair` function, which likely calculates the derived address for the new tradable pair using the CREATE2 opcode, considering the factory address, the two token addresses, and an init code hash.The `agent.spec.js` file seems to contain tests for the bot's functionality, such as testing the handling of non-relevant transactions, valid pair creation, and multiple pair creation detected within the same transaction to ensure that the bot behaves correctly.In summary, this bot is set up to monitor the creation of new token pairs on PancakeSwap on the Binance Smart Chain and provide informational alerts when such events occur, with the ability to be tested and validated using sample data.",
    "version": "0.0.1"
  },
  {
    "bot_id": "0x84711b6071748c77ddf31daa7cebf1628121c1800967acda3af502945d231c01",
    "developer_id": "0xeCE5e25df1A8B2b8a73Da0FAB7c7856E769a5E2D",
    "name": "agent-graff",
    "description": "The web3 bot described and implemented in the provided source code is designed to monitor the Ethereum blockchain for contract creation transactions that use a high amount of gas. Its purpose is to detect and alert users to the use of gas amounts that exceed a specified threshold during contract creation.The bot functions as follows:1. It listens for new transactions on the Ethereum network and checks if they are of type 'create', which indicates a new smart contract is being deployed.2. For each 'create' transaction, the bot calculates the total amount of gas used by multiplying the `gas` consumed by the transaction with the `gas_price`.3. If the gas used exceeds the `HIGH_GAS_THRESHOLD` (set to 2,000,000 in the code), the bot generates an alert.4. The bot includes the address of the contract creator, the contract address, the network on which the transaction was executed, the transaction hash, and the amount of gas used in the metadata of the alert.5. The alert is labeled with an ID of 'HIGH-GAS-CONTRACT-CREATION-MONITOR', and has a severity and type of 'Info', indicating that the occurrence is noteworthy but does not necessarily signal malicious activity.The test code located in `agent_test.py` checks the functionality of the bot by triggering its detection logic with a test event. It confirms that an alert is generated when a transaction meets the conditions (i.e., is of type 'create' and uses more than the threshold gas). The test verifies that the alert's properties `severity`, `name`, `type`, and `metadata['gas_used']` are set as expected.It's important to note that there is no mention of supporting other blockchains beside Ethereum in the given description, but in theory, the bot could be adapted to support other EVM-compatible chains like Binance Smart Chain (BSC) by adjusting the network parameters and threshold values as needed.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0x7704a975c97ed444c0329cade1f85af74566d30fb6a51550529b19153a0781cb",
    "developer_id": "0x88dC3a2284FA62e0027d6D6B1fCfDd2141a143b8",
    "name": "Ownership Transfer Detection",
    "description": "This bot reports when the OwnershipTransferred event is emitted and the `from` address is a non zero addressPurpose:The specific web3 bot described is designed to monitor blockchain transactions for events where ownership of a contract is transferred from one address to another, specifically when the `OwnershipTransferred` event is emitted and the `from` address is non-zero, indicating a transfer from an existing owner rather than an initial assignment. It aims to detect and raise high-severity, suspicious alerts for such activities since they could indicate potential malicious actions like a takeover of smart contract ownership.Supported Chains:- Ethereum- Optimism- BNB Smart Chain- Polygon- Fantom- Arbitrum- AvalancheAlerts:The bot triggers alert `NETHFORTA-4` with high severity and type \"Suspicious\" when the specified event is detected. Metadata includes the previous owner's address (`from`), the new owner's address (`to`), and an `anomalyScore`. It sets up labels to classify the transaction hash, the transaction initiator's address, the previous owner's address, and the new owner's address with certain attributes like \"Attack\", \"Attacker\", and \"Victim\".Test Data:The bot's behavior can be verified on the Ethereum blockchain using a provided transaction hash.Source Code Analysis:The source code includes three main JavaScript files: `agent.spec.js`, `keys.js`, and `agent.js`.1. `agent.spec.js`: Contains test cases for the agent to ensure proper detection of ownership transfer events and ignores irrelevant or zero-address events. Unit tests check whether the bot's `handleTransaction` function can return findings under different conditions using mocked events.2. `keys.js`: Contains API keys, including the `ZETTABLOCK_API_KEY`, which is a placeholder for the actual API key used for authentication or API access, likely used internally for anomaly scoring.3. `agent.js`: Defines the `provideHandleTransaction` function to process transactions and check for `OwnershipTransferred` events. This function creates alerts if the event is from a non-zero address. It also configures the alert scoring by possibly interfacing with an external alert rating service.The `initialize` method prepares the environment by setting the API key variables and checking the network.To summarize, this web3 bot listens for specific contract ownership transfer events on various blockchain networks and issues alerts based on defined criteria to flag potential suspicious activities. It also integrates with a rating system to score alerts for anomalies.",
    "version": "0.2.0"
  },
  {
    "bot_id": "0x54755e62ecfe0437b1161216c29b7288075652800e65cc9aafc94a314a45eb08",
    "developer_id": "0x11b6A5fE2906F3354145613DB0d99CEB51f604C9",
    "name": "harry-bot-threatintel",
    "description": "Purpose of Bot:This bot is designed to monitor the Ethereum blockchain for indicators of malicious activity related to draining funds from users, such as through scam transactions. It specifically looks for patterns that have been observed in various drainer attacks.The source code provided defines different modules with reference to smart contract activities. It references detecting transfers of Tether (USDT) that may be associated with malicious behavior. The agent.js file outlines how findings are reported, while index.js files appear to describe three separate handlers for detecting the creation of new smart contracts, detecting Tether transfers using the transferFrom function that may be part of a scam, and detecting possibly malicious function signatures.From the source code, it's clear that the bot's focus is on:1. Identifying large Tether transfers that may indicate suspicious activity (agent.spec.js).2. Reporting the creation of new smart contracts that may be part of a scam (index.js).3. Detecting the use of the `transferFrom` function with Tether, which may indicate a scam attempt (index.js).4. Identifying potentially malicious function signatures that might be used to convince users to part with their assets (index.js).The bot seems to limit its findings to prevent spamming the alert feed and uses different levels of severity for its reporting based on the assessed risk associated with the transaction value. Additionally, the bot integrates with an API to fetch current Tether prices to calculate potential financial impact in USD terms. It also includes a list of addresses that should be ignored, possibly to filter out known entities that do not pose a risk.",
    "version": "0.0.8"
  },
  {
    "bot_id": "0xf76ba7d1d681673300b433611d53c27c6a16666c8ee8fbd167314a6297702ef4",
    "developer_id": "0x14330879ca506D91edD8077b07E0F1B7EfBD91B2",
    "name": "forta-bot-evasion",
    "description": "The purpose of this specific web3 bot is to detect and alert on different types of evasion tactics used by smart contracts on the Ethereum blockchain, primarily focusing on metamorphic contracts and red pill contracts. The bot uses transaction traces and static analysis on bytecode to identify these tactics.**Metamorphic Contracts**:- These contracts can change their bytecode while maintaining the same address, using the CREATE2 opcode.- The bot looks for factory contracts that deploy these \"mutant\" contracts.- It provides alerts for factory deployment and mutant deployment, rating the severity as \"Info\" and type as \"Suspicious\".**Red Pill Contract**:- These contracts aim to detect if they are operating in a simulation environment and only activate malicious functions on the mainnet.- The bot checks for specific patterns in the bytecode that might indicate such behavior.The bot assesses transactions on a probabilistic basis, assigning scores to indicators and calculating an overall probability that a transaction is an instance of the evasion techniques it is designed to detect. Alerts are only raised if the calculated probabilities meet or exceed a set confidence level, defined in the `options.py`.**Source Code**:The main components of the source code are:- **options.py**: Contains configuration settings, such as `MIN_CONFIDENCE` which is the threshold for raising an alert, and `ALERT_HISTORY_SIZE`, the number of transactions the bot keeps track of for statistical purposes.- **findings.py**: Defines the structure of alerts, enumerates evasion types, and provides functions for formatting the alerts.- **utils.py**: Provides utility functions for the bot such as setting up logging, formatting addresses, and profiling the execution of functions.- **agent.py**: Contains the main logic for the bot, analyzing transactions from the Ethereum blockchain to detect evasion techniques using a combination of provided metrics and custom logic.- **ioseeth library**: While the specific code for this library is not included in the provided source, it is referenced throughout `agent.py` and is responsible for defining the metrics and indicators used by the bot to detect the evasion tactics.In summary, the bot is designed to operate within the Ethereum ecosystem to detect smart contract behaviors that are indicative of evasion, utilizing a scoring system to quantify suspicion, and ultimately providing alerts for potentially suspicious contract interactions that can be further analyzed or audited.",
    "version": "0.1.17"
  },
  {
    "bot_id": "0xe02f3b971a3a12502974ba88c7aaa3901cfc05c1a0f4a236f1d42b5c1bdb08f2",
    "developer_id": "0x39837b6391dC50AE0F53556E6042bF3fd36C7069",
    "name": "Unusual-Total-Pnl",
    "description": "Purpose:The bot's purpose is to monitor and analyze the \"ClosePosition\" events on decentralized finance (DeFi) platforms, specifically on the GMX Vault smart contracts of supported chains (Arbitrum and Avalanche). It calculates the total realized profit and loss (PnL) for each address that interacts with it within a one-hour time frame. If the total realized PnL for any address exceeds a pre-defined threshold within this time frame, the bot triggers an alert.The specific alert generated, FORTA-1, includes the following metadata:- Initiator: The address that originated the transaction.- TotalRealisedPnl: The sum of the realized PnL within an hour.- Vault: The address of the GMX Vault smart-contract.The severity of the findings is always \"info,\" and the type is \"suspicious,\" suggesting that there is no immediate threat or need for action, but the activity is notable and potentially worth investigating further.Source Code:The source code provided consists of JavaScript files that are likely part of a larger project using the Forta framework for blockchain monitoring and surveillance.- `agent.spec.js`: Contains the test suite for the bot's handler function. It includes various test scenarios that simulate different conditions under which the bot would generate findings.- `utils.js`: Defines constants used throughout the bot's operation, such as the details of the \"ClosePosition\" event and a function `createFinding` to standardize the alert creation process.- `network.js`: Holds configuration details for different blockchain networks where the GMX Vault operates, specifically Arbitrum and Avalanche networks.- `agent.js`: Defines the bot's initialization and handler functions. The handler function processes transactions, filtering \"ClosePosition\" events against the GMX Vault contract address, and captures any that exceed the PnL threshold, generating alerts through the `createFinding` function.Overall, the bot is designed to provide an automated oversight mechanism for detecting unusually high total PnL on specific DeFi platforms. It serves as a tool for risk management and anomaly detection within the DeFi space.",
    "version": "0.0.2"
  },
  {
    "bot_id": "0xf496e3f522ec18ed9be97b815d94ef6a92215fc8e9a1a16338aee9603a5035fb",
    "developer_id": "0xad7547d09015664943d0A7c1BeA47f28dF298EC0",
    "name": "cex-funding",
    "description": "The purpose of the CEX Funding Bot is to detect and alert when a new externally owned account (EOA) is funded by certain centralized exchanges (CEXes), specifically initially alerting on transactions from FixFloat exchange. It operates across all supported blockchain chains.The bot generates an alert of type \"CEX-FUNDING-1\" when a funding transaction meets the following criteria:- The transfer is made to a new EOA (it is the first transaction for the recipient address and it is not a contract).- The transfer is done using the native asset of the blockchain and the amount is relatively small (below specified thresholds for different chains coded into the bot).- The severity of this type of alert is always low.- The type of alert is always set to \"suspicious\".- It emits labels with low confidence (0.3) indicating an \"attacker\" address and an \"attacker_contract\" address even though the severity is low.- The metadata included with the alert exposes an \"anomaly_score\", which is calculated by dividing unverified contract creations by all contract creations, if applicable (chain IDs are excluded).- The metadata will also contain the amount of the funding, the funded address, as well as the name of the CEX involved.The bot does not trigger an alert when:- The sender address is not recognized as a CEX from its internal list.- The recipient is a contract.- The recipient address is not new (has been involved in previous transactions).- The funding amount is greater than the specified threshold.The source code provides various Python classes to manage the alerting mechanism. The main logic resides in the `agent.py` file where it orchestrates the process of detecting CEX-funded transactions and emitting alerts based on the predefined criteria.The `detect_cex_funding` function checks each transaction event to see if the recipient is a new EOA and that the sender is a recognized CEX that sent a transaction below the threshold. If the criteria are met, a `CEXFundingFinding` object is created, and an alert is emitted through the `emit_finding` method.The bot provides mock transaction data and utility classes that mimic Web3's functionality for testing purposes. The test suite in `agent_test.py` validates that the bot correctly emits alerts under the right conditions and does not emit them when the conditions are not met.",
    "version": "0.0.6"
  }
]